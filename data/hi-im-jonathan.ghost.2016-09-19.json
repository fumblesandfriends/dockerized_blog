{"meta":{"exported_on":1474243927509,"version":"007"},"data":{"posts":[{"id":2,"uuid":"8412b734-aa07-4df9-accf-9f075ebdb041","title":"Welcome to blog.jonthankolb.com","slug":"welcome-to-jonthankolb-com","markdown":"#Now on the World Wide Web\n\nThis post is a short and sweet overview of how I built my website. I will get into the nitty gritty details when I have a bit more time to sit down and write.\n\n#####The Current Stack\n* Ubuntu\n* [Docker](https://www.docker.com/)\n* [Docker Compose](https://docs.docker.com/compose/)\n* [NGINX](http://nginx.com/)\n* [Node.js (express)](http://expressjs.com/) \n* [Ghost](https://ghost.org/)\n\n####Frontend Tooling\n* [Yeoman](http://yeoman.io/)\n* [Grunt](http://grunt.io/)\n* [Webpack](http://webpack.github.io/)\n* [Sass/Compass](http://compass-style.org/)\n* Js Frameworks TBD... \n\n####Server Configuration\nCurrently this website is servered from a single server that is running four Docker containers: nginx, two instances of an express webapp, and a single ghost blog instance. Nginx handles all of the reverse proxying to the webapps, as well as the load balancing of the express webapp.\n\n####The Source\nThe code that runs this site can be found at my [github account](https://github.com/fumblesandfriends/website)\n\n","html":"<h1 id=\"nowontheworldwideweb\">Now on the World Wide Web</h1>\n\n<p>This post is a short and sweet overview of how I built my website. I will get into the nitty gritty details when I have a bit more time to sit down and write.</p>\n\n<h5 id=\"thecurrentstack\">The Current Stack</h5>\n\n<ul>\n<li>Ubuntu</li>\n<li><a href=\"https://www.docker.com/\">Docker</a></li>\n<li><a href=\"https://docs.docker.com/compose/\">Docker Compose</a></li>\n<li><a href=\"http://nginx.com/\">NGINX</a></li>\n<li><a href=\"http://expressjs.com/\">Node.js (express)</a> </li>\n<li><a href=\"https://ghost.org/\">Ghost</a></li>\n</ul>\n\n<h4 id=\"frontendtooling\">Frontend Tooling</h4>\n\n<ul>\n<li><a href=\"http://yeoman.io/\">Yeoman</a></li>\n<li><a href=\"http://grunt.io/\">Grunt</a></li>\n<li><a href=\"http://webpack.github.io/\">Webpack</a></li>\n<li><a href=\"http://compass-style.org/\">Sass/Compass</a></li>\n<li>Js Frameworks TBD... </li>\n</ul>\n\n<h4 id=\"serverconfiguration\">Server Configuration</h4>\n\n<p>Currently this website is servered from a single server that is running four Docker containers: nginx, two instances of an express webapp, and a single ghost blog instance. Nginx handles all of the reverse proxying to the webapps, as well as the load balancing of the express webapp.</p>\n\n<h4 id=\"thesource\">The Source</h4>\n\n<p>The code that runs this site can be found at my <a href=\"https://github.com/fumblesandfriends/website\">github account</a></p>","image":"","featured":0,"page":0,"status":"published","language":"en_US","meta_title":"","meta_description":null,"author_id":1,"created_at":1428545604437,"created_by":1,"updated_at":1428802704162,"updated_by":1,"published_at":1428547029501,"published_by":1,"visibility":"public","mobiledoc":null},{"id":3,"uuid":"b2fd3c70-2062-4243-bcce-bd23f68d7d08","title":"Server Architecture","slug":"server-architecture","markdown":"Jonathankolb.com is currently running on a single vm that is running 4 processes. This post will give a more in-depth description of how requests are routed upon landing on jonathankolb.com. The basic flow of requests is as follows: \n\n{<1>}![Server diagram](https://i.imgur.com/9c7J2Mf.png)\n\n\n###NGINX Config\n\nThe NGINX config is fairly straightforward: it defines upstream hosts for the different server routes and acts as both a reverse proxy and a load balancer. I readily admit that NGINX configuration is not my specialty; this entire config is cobbled together from code examples I have found during basic research. My site has very low traffic levels so I have not needed to spend any real time tuning this config.\n\n\n    worker_processes 4;\n\n    events { worker_connections 1024; }\n\n    http {\n\n      upstream node-app {\n            least_conn;\n            server node1:8080 weight=10 max_fails=3 fail_timeout=30s;\n            server node2:8080 weight=10 max_fails=3 fail_timeout=30s;\n      }\n\n      upstream blog {\n          least_conn;\n          server blog1:2368 weight=10 max_fails=3 fail_timeout=30s;\n      }\n\n      server {\n            listen 80;\n            location / {\n              proxy_pass http://node-app;\n              proxy_http_version 1.1;\n              proxy_set_header Upgrade $http_upgrade;\n              proxy_set_header Connection 'upgrade';\n              proxy_set_header Host $host;\n              proxy_cache_bypass $http_upgrade;\n            }\n      }\n\t  server {\n\t\t\tlisten 80;\n        \tserver_name blog.jonathankolb.com;\n        \tlocation / {\n            \tproxy_pass http://blog;\n                proxy_http_version 1.1;\n                proxy_set_header Upgrade $http_upgrade;\n                proxy_set_header Connection 'upgrade';\n                proxy_set_header Host $host;\n                proxy_cache_bypass $http_upgrade;\n            }\n  \t  }\n    }\n\nIf you are wondering where blog1, node1, and node2 are defined, they are host overrides for the actual address where the processes run.  \n","html":"<p>Jonathankolb.com is currently running on a single vm that is running 4 processes. This post will give a more in-depth description of how requests are routed upon landing on jonathankolb.com. The basic flow of requests is as follows: </p>\n\n<p><img src=\"https://i.imgur.com/9c7J2Mf.png\" alt=\"Server diagram\" /></p>\n\n<h3 id=\"nginxconfig\">NGINX Config</h3>\n\n<p>The NGINX config is fairly straightforward: it defines upstream hosts for the different server routes and acts as both a reverse proxy and a load balancer. I readily admit that NGINX configuration is not my specialty; this entire config is cobbled together from code examples I have found during basic research. My site has very low traffic levels so I have not needed to spend any real time tuning this config.</p>\n\n<pre><code>worker_processes 4;\n\nevents { worker_connections 1024; }\n\nhttp {\n\n  upstream node-app {\n        least_conn;\n        server node1:8080 weight=10 max_fails=3 fail_timeout=30s;\n        server node2:8080 weight=10 max_fails=3 fail_timeout=30s;\n  }\n\n  upstream blog {\n      least_conn;\n      server blog1:2368 weight=10 max_fails=3 fail_timeout=30s;\n  }\n\n  server {\n        listen 80;\n        location / {\n          proxy_pass http://node-app;\n          proxy_http_version 1.1;\n          proxy_set_header Upgrade $http_upgrade;\n          proxy_set_header Connection 'upgrade';\n          proxy_set_header Host $host;\n          proxy_cache_bypass $http_upgrade;\n        }\n  }\n  server {\n        listen 80;\n        server_name blog.jonathankolb.com;\n        location / {\n            proxy_pass http://blog;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection 'upgrade';\n            proxy_set_header Host $host;\n            proxy_cache_bypass $http_upgrade;\n        }\n    }\n}\n</code></pre>\n\n<p>If you are wondering where blog1, node1, and node2 are defined, they are host overrides for the actual address where the processes run.  </p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1428801295680,"created_by":1,"updated_at":1428804300320,"updated_by":1,"published_at":1428804300324,"published_by":1,"visibility":"public","mobiledoc":null},{"id":4,"uuid":"4629132c-dc7e-4115-84df-fb96b3340cd8","title":"Frontend tooling","slug":"front-end-tooling","markdown":"This site's front end ecosystem is composed of NPM, Grunt, Compass and Webpack. The current asset pipeline is orchestrated by Grunt with Compass and Webpack tasks as steps in the pipeline. While Webpack can handle all of the responsibilities that Grunt is being used for, Grunt seemed much easier to configure. The main reason for not attempting to handle the entire asset pipeline through Webpack is that the configuration was overly complex and was not as intuitive to follow. \n\n#####Development Flow\nThe Gruntfile.js has a watch task that will detect any file's changes triggering a series of tasks that ultimatly lead to current assets being present on the server. The flow is as follows: \n\n- clean: This task will delete all files generated in the previous grunt run.\n\n- jshint: This runs static analysis on the js files to prevent simple bugs and code smells.\n\n- webpack: This will create a js bundle of all the site js code as well as transpile any JSX files.\n\n- compass: This will compile all of the sass files and build any sprites.\n\n- concat: This will concatenate any of my 3rd party css or js that is not conducive to integration with Compass or Webpack.\n\n- string-replace: This task is a simple string replace powered by a regex that adds a cache buster to all of the static asset urls. \n\n#####Production Flow\nThe production flow is almost exactly the same except for two key differences: \n\n- compass: The compass config now has another option passed to it forcing the resulting css to be minimized.\n\n- uglify: This task runs dead last and replaces the js files with uglified versions.\n\n\nAs always all code mentioned here can be found on [github](https://github.com/fumblesandfriends/website/blob/master/node/Gruntfile.js).\n","html":"<p>This site's front end ecosystem is composed of NPM, Grunt, Compass and Webpack. The current asset pipeline is orchestrated by Grunt with Compass and Webpack tasks as steps in the pipeline. While Webpack can handle all of the responsibilities that Grunt is being used for, Grunt seemed much easier to configure. The main reason for not attempting to handle the entire asset pipeline through Webpack is that the configuration was overly complex and was not as intuitive to follow. </p>\n\n<h5 id=\"developmentflow\">Development Flow</h5>\n\n<p>The Gruntfile.js has a watch task that will detect any file's changes triggering a series of tasks that ultimatly lead to current assets being present on the server. The flow is as follows: </p>\n\n<ul>\n<li><p>clean: This task will delete all files generated in the previous grunt run.</p></li>\n<li><p>jshint: This runs static analysis on the js files to prevent simple bugs and code smells.</p></li>\n<li><p>webpack: This will create a js bundle of all the site js code as well as transpile any JSX files.</p></li>\n<li><p>compass: This will compile all of the sass files and build any sprites.</p></li>\n<li><p>concat: This will concatenate any of my 3rd party css or js that is not conducive to integration with Compass or Webpack.</p></li>\n<li><p>string-replace: This task is a simple string replace powered by a regex that adds a cache buster to all of the static asset urls. </p></li>\n</ul>\n\n<h5 id=\"productionflow\">Production Flow</h5>\n\n<p>The production flow is almost exactly the same except for two key differences: </p>\n\n<ul>\n<li><p>compass: The compass config now has another option passed to it forcing the resulting css to be minimized.</p></li>\n<li><p>uglify: This task runs dead last and replaces the js files with uglified versions.</p></li>\n</ul>\n\n<p>As always all code mentioned here can be found on <a href=\"https://github.com/fumblesandfriends/website/blob/master/node/Gruntfile.js\">github</a>.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1430081984527,"created_by":1,"updated_at":1430255757483,"updated_by":1,"published_at":1430255757489,"published_by":1,"visibility":"public","mobiledoc":null},{"id":5,"uuid":"a872ba9a-0b8b-4a53-b078-cedc1f9a73e3","title":"A Single Page App with  React, and Foundation","slug":"foundation-react-and-jsx","markdown":"The entire purpose of jonathankolb.com is to provide a playground to experiment with new technologies. In that spirit I have picked frameworks that I have exactly zero experience with to power the frontend. \n\nThrough most of my coding career I have worked in existing code bases dealing mostly with: [Backbone.js](http://backbonejs.org/), [Flight.js](https://flightjs.github.io/), [Marionette](http://marionettejs.com/), and [Bootstrap](http://getbootstrap.com/). So left to my own devices I have picked the hot new things to play around with and get some much needed experience. \n\n###Frontend Architecture\njonathankolb.com is a single page app that swaps out the body content while leaving the header and footer intact. During my professional career I have not had the oportunity to dive deeply into single page apps so I am looking forward to wrapping my brain around some of the challenges of this design pattern. \n\n######Routing\nI am using react-router to process all of my apps requests. I have set it up to use HTML5's history API, therefore making my site only work on modern browsers.\n\n######Page Design\nEach page in the app is a React component made up of subcomponents. When the router detects a change in the url it will render the new page into the body section of the page without ever actually redirecting the page.\n\n######Responsive Styling\nAll styling is handled by passing classes to JSX component definitions. Also the header and footer surounding the page content is completely implemented via Foundation templates.\n\n\n######Everything in Action\napp.jsx\n\n```\nvar React = require('react');\nvar $ = require('jquery');\n\n// START Basic Foundation setup\n$(document).foundation();\nvar offCanvasMenuComponent = require('offCanvasMenu');\n// END\n\n//START REACT ROUTER\nvar Router = require('react-router');\nvar Route = Router.Route;\nvar DefaultRoute = Router.DefaultRoute;\nvar NotFoundRoute = Router.NotFoundRoute;\n\n//APP PAGES\nvar Index = require('react/page/index');\nvar NotFound = require('react/page/404');\n\n\nvar routes = (\n  <Route name=\"app\" path=\"/\">\n    <DefaultRoute handler={Index} />\n    <NotFoundRoute handler={NotFound} />\n  </Route>\n);\n\nRouter.run(routes, Router.HistoryLocation, function (Handler) {\n  React.render(<Handler/>, document.getElementById('page-content'));\n});\n```\n\nAs always the complete code can be found on [github](https://github.com/fumblesandfriends/website/tree/master/node)","html":"<p>The entire purpose of jonathankolb.com is to provide a playground to experiment with new technologies. In that spirit I have picked frameworks that I have exactly zero experience with to power the frontend. </p>\n\n<p>Through most of my coding career I have worked in existing code bases dealing mostly with: <a href=\"http://backbonejs.org/\">Backbone.js</a>, <a href=\"https://flightjs.github.io/\">Flight.js</a>, <a href=\"http://marionettejs.com/\">Marionette</a>, and <a href=\"http://getbootstrap.com/\">Bootstrap</a>. So left to my own devices I have picked the hot new things to play around with and get some much needed experience. </p>\n\n<h3 id=\"frontendarchitecture\">Frontend Architecture</h3>\n\n<p>jonathankolb.com is a single page app that swaps out the body content while leaving the header and footer intact. During my professional career I have not had the oportunity to dive deeply into single page apps so I am looking forward to wrapping my brain around some of the challenges of this design pattern. </p>\n\n<h6 id=\"routing\">Routing</h6>\n\n<p>I am using react-router to process all of my apps requests. I have set it up to use HTML5's history API, therefore making my site only work on modern browsers.</p>\n\n<h6 id=\"pagedesign\">Page Design</h6>\n\n<p>Each page in the app is a React component made up of subcomponents. When the router detects a change in the url it will render the new page into the body section of the page without ever actually redirecting the page.</p>\n\n<h6 id=\"responsivestyling\">Responsive Styling</h6>\n\n<p>All styling is handled by passing classes to JSX component definitions. Also the header and footer surounding the page content is completely implemented via Foundation templates.</p>\n\n<h6 id=\"everythinginaction\">Everything in Action</h6>\n\n<p>app.jsx</p>\n\n<pre><code>var React = require('react');  \nvar $ = require('jquery');\n\n// START Basic Foundation setup\n$(document).foundation();\nvar offCanvasMenuComponent = require('offCanvasMenu');  \n// END\n\n//START REACT ROUTER\nvar Router = require('react-router');  \nvar Route = Router.Route;  \nvar DefaultRoute = Router.DefaultRoute;  \nvar NotFoundRoute = Router.NotFoundRoute;\n\n//APP PAGES\nvar Index = require('react/page/index');  \nvar NotFound = require('react/page/404');\n\n\nvar routes = (  \n  &lt;Route name=\"app\" path=\"/\"&gt;\n    &lt;DefaultRoute handler={Index} /&gt;\n    &lt;NotFoundRoute handler={NotFound} /&gt;\n  &lt;/Route&gt;\n);\n\nRouter.run(routes, Router.HistoryLocation, function (Handler) {  \n  React.render(&lt;Handler/&gt;, document.getElementById('page-content'));\n});\n</code></pre>\n\n<p>As always the complete code can be found on <a href=\"https://github.com/fumblesandfriends/website/tree/master/node\">github</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1430085670844,"created_by":1,"updated_at":1430408697518,"updated_by":1,"published_at":1430255848601,"published_by":1,"visibility":"public","mobiledoc":null},{"id":6,"uuid":"5d11c467-1bb5-43c0-9e81-319f378a231e","title":"Linting ES6 and JSX","slug":"linting-es6-and-jsx","markdown":"I recently ran into a problem ensuring code quality in my project. In the past, it was a simple matter of adding a jshint step to my gruntfile; however, now that I am using ES6 features and JSX files, it has thrown a bit of a wrench in the works. I began to see errors like this:\n\n```\nLinting assets/js/app.jsx ...ERROR\n[L28:C47] E015: Unclosed regular expression.\n    <DefaultRoute name='Home' handler={Index} />\nLinting assets/js/app.jsx ...ERROR\n>> Unrecoverable syntax error. (62% scanned).\n\nWarning: Task \"jshint:files\" failed. Use --force to continue.\n```\n\nMy first instinct was to run jshint after I ran my various transpilers. That was ruled out as a terrible idea after I actually thought about it for more than a few seconds. The reason being is that jshint would no longer be checking my code but rather transpiled code that I have no control over.\n\n#####ESLint \n\nI did a bit of digging and came across: [ESLint](http://eslint.org/). ESLint has support for JSX and is currently working to support the full range of ES6 functionality.\n\n######Webpack Integration\nESLint is already supported as a loader for webpack. Simply install the eslint-loader\n\n```\nnpm install --save-dev eslint-loader\n```\n\nNext we want to make sure that eslint is run before any of our other loaders. \n\n```\nmodule: {\n\tpreLoaders: [\n    \t{\n        \ttest: /(\\.js$|\\.jsx$)/, \n            exclude: /node_modules/, \n            loader: \"eslint-loader\"\n        }\n    ]\n},\neslint: {\n\tconfigFile: '.eslintrc'\n},\n\n```\nFinally we add an .eslintrc file to the root of our project\n\n```\n{\n  \"ecmaFeatures\": {\n    \"jsx\": true,\n  },\n\n  \"env\": {\n    \"browser\": true,\n    \"node\": true,\n    \"es6\": true\n  },\n\n  \"rules\": {\n    \"no-unused-vars\": [1] \n  }\n}\n```\n\n\n#####Gotchas\nAt the time of writing this article ESLint still had issues with realizing when a declared React component was being used. For example:\n\n```\n...\nvar Route = Router.Route;\nvar DefaultRoute = Router.DefaultRoute;\nvar NotFoundRoute = Router.NotFoundRoute;\n\n//APP PAGES\nvar Index = require('page/index');\nvar NotFound = require('page/404');\n\n\nvar routes = (\n  <Route name='JonthanKolb' path=\"/\">\n    <DefaultRoute name='Home' handler={Index} />\n    <NotFoundRoute name='404' handler={NotFound} />\n  </Route>\n);\n...\n```\n\nClearly all of the defined 'vars' are being used; however, ESLint will still output the following:\n\n```\nWARNING in ./assets/js/app.jsx\n\n/dockerDev/node/assets/js/app.jsx\n  17:4  warning  Route is defined but never used          no-unused-vars\n  18:4  warning  DefaultRoute is defined but never used   no-unused-vars\n  19:4  warning  NotFoundRoute is defined but never used  no-unused-vars\n\n✖ 3 problems (0 errors, 3 warnings)\n```\n\nI was forced to bump 'no-unused-vars' down to a warning to allow my project to build.\n\n\n","html":"<p>I recently ran into a problem ensuring code quality in my project. In the past, it was a simple matter of adding a jshint step to my gruntfile; however, now that I am using ES6 features and JSX files, it has thrown a bit of a wrench in the works. I began to see errors like this:</p>\n\n<pre><code>Linting assets/js/app.jsx ...ERROR  \n[L28:C47] E015: Unclosed regular expression.\n    &lt;DefaultRoute name='Home' handler={Index} /&gt;\nLinting assets/js/app.jsx ...ERROR  \n&gt;&gt; Unrecoverable syntax error. (62% scanned).\n\nWarning: Task \"jshint:files\" failed. Use --force to continue.  \n</code></pre>\n\n<p>My first instinct was to run jshint after I ran my various transpilers. That was ruled out as a terrible idea after I actually thought about it for more than a few seconds. The reason being is that jshint would no longer be checking my code but rather transpiled code that I have no control over.</p>\n\n<h5 id=\"eslint\">ESLint</h5>\n\n<p>I did a bit of digging and came across: <a href=\"http://eslint.org/\">ESLint</a>. ESLint has support for JSX and is currently working to support the full range of ES6 functionality.</p>\n\n<h6 id=\"webpackintegration\">Webpack Integration</h6>\n\n<p>ESLint is already supported as a loader for webpack. Simply install the eslint-loader</p>\n\n<pre><code>npm install --save-dev eslint-loader  \n</code></pre>\n\n<p>Next we want to make sure that eslint is run before any of our other loaders. </p>\n\n<pre><code>module: {  \n    preLoaders: [\n        {\n            test: /(\\.js$|\\.jsx$)/, \n            exclude: /node_modules/, \n            loader: \"eslint-loader\"\n        }\n    ]\n},\neslint: {  \n    configFile: '.eslintrc'\n},\n</code></pre>\n\n<p>Finally we add an .eslintrc file to the root of our project</p>\n\n<pre><code>{\n  \"ecmaFeatures\": {\n    \"jsx\": true,\n  },\n\n  \"env\": {\n    \"browser\": true,\n    \"node\": true,\n    \"es6\": true\n  },\n\n  \"rules\": {\n    \"no-unused-vars\": [1] \n  }\n}\n</code></pre>\n\n<h5 id=\"gotchas\">Gotchas</h5>\n\n<p>At the time of writing this article ESLint still had issues with realizing when a declared React component was being used. For example:</p>\n\n<pre><code>...\nvar Route = Router.Route;  \nvar DefaultRoute = Router.DefaultRoute;  \nvar NotFoundRoute = Router.NotFoundRoute;\n\n//APP PAGES\nvar Index = require('page/index');  \nvar NotFound = require('page/404');\n\n\nvar routes = (  \n  &lt;Route name='JonthanKolb' path=\"/\"&gt;\n    &lt;DefaultRoute name='Home' handler={Index} /&gt;\n    &lt;NotFoundRoute name='404' handler={NotFound} /&gt;\n  &lt;/Route&gt;\n);\n...\n</code></pre>\n\n<p>Clearly all of the defined 'vars' are being used; however, ESLint will still output the following:</p>\n\n<pre><code>WARNING in ./assets/js/app.jsx\n\n/dockerDev/node/assets/js/app.jsx\n  17:4  warning  Route is defined but never used          no-unused-vars\n  18:4  warning  DefaultRoute is defined but never used   no-unused-vars\n  19:4  warning  NotFoundRoute is defined but never used  no-unused-vars\n\n✖ 3 problems (0 errors, 3 warnings)\n</code></pre>\n\n<p>I was forced to bump 'no-unused-vars' down to a warning to allow my project to build.</p>","image":"/content/images/2015/05/eslint.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1430572368518,"created_by":1,"updated_at":1431199422444,"updated_by":1,"published_at":1430575157516,"published_by":1,"visibility":"public","mobiledoc":null},{"id":7,"uuid":"24cf4635-d44e-4ad2-8d09-64f38d81a92f","title":"Docker-izing a Node App","slug":"deploying-code-with-docker","markdown":"####Not familiar with docker?\nI would highly recommend that you learn about it [straight from the source.](https://www.docker.com/whatisdocker) However, Docker is, in essence, a container for your application to run in that will be exactly the same no matter where the container is deployed. \n\n#### Building a container image from scratch\nI mentioned previously that a Docker container was based off on an image. Images are defined and built from a Dockerfile. An image is also based off of any pre-existing image. I would highly recommend [using a prebuilt image](https://registry.hub.docker.com/_/node/). This tuturial is just a brief explanation on how to actually build an image.\n\n###### The project Setup\nAny basic node app can be dockerized. Here is an example express app setup:\n```\napp/\n\tassets/\n    \tcss/\n        js/\n        images/\n\tapp.js\n    package.json\n```\n\nFor the purposes of this example, when the command node app.js is run, this will start the server on port 8081.\n\n\n###### Stepping through the Dockerfile\n\nThe first thing the Dockerfile specifies is its base image\n> FROM    ubuntu\n\nThen file lists a series of commands to run on the base image to install all needed dependencies. In this case nodejs \n\n> RUN apt-get update\n\n> RUN apt-get -y install curl\n\n> RUN curl -sL https://deb.nodesource.com/setup | sudo bash -\n\n> RUN apt-get -y install python build-essential nodejs\n\nNext we will define how to copy our source code into the image and install the application's dependencies\n\n> COPY . /src\n\n> RUN cd /src; npm install\n\nDeclare the port that the server runs on\n\n> EXPOSE 8081\n\nFinally declare the command that will be run when a container is started from this image.\n\n> CMD [\"node\", \"./app.js\"]\n\n###### The Complete Dockerfile \nThe Dockerfile explains the step by step instructions to create a new docker image. \n\n```\n\n# Set the base image to Ubuntu\nFROM    ubuntu\n\n# File Author / Maintainer\nMAINTAINER Jonathan Kolb\n\n# Update the repository\nRUN apt-get update\n\n# Install Node.js and other dependencies\nRUN apt-get -y install curl\nRUN curl -sL https://deb.nodesource.com/setup | sudo bash -\nRUN apt-get -y install python build-essential nodejs\n\n# Bundle app source\nCOPY . /src\n\n# Install app dependencies\nRUN cd /src; npm install\n\n# Expose port\nEXPOSE  8081\n\n# Run app using node\nCMD [\"node\", \"./app.js\"]\n```\n\n####Building The Image\nPlace the Dockerfile in your project root directory\n\nRun the following\n```\ndocker build -t <the-name-of-your-image>:<code-version> .\n```\nWhen this process is finished when you run\n```\ndocker images\n```\nYou should now see the image you created in the list.\n\n######Running the image\n```\ndocker run -p 8081:8081 <name-of-the-image>:<version> \n```\n\n\n\n","html":"<h4 id=\"notfamiliarwithdocker\">Not familiar with docker?</h4>\n\n<p>I would highly recommend that you learn about it <a href=\"https://www.docker.com/whatisdocker\">straight from the source.</a> However, Docker is, in essence, a container for your application to run in that will be exactly the same no matter where the container is deployed. </p>\n\n<h4 id=\"buildingacontainerimagefromscratch\">Building a container image from scratch</h4>\n\n<p>I mentioned previously that a Docker container was based off on an image. Images are defined and built from a Dockerfile. An image is also based off of any pre-existing image. I would highly recommend <a href=\"https://registry.hub.docker.com/_/node/\">using a prebuilt image</a>. This tuturial is just a brief explanation on how to actually build an image.</p>\n\n<h6 id=\"theprojectsetup\">The project Setup</h6>\n\n<p>Any basic node app can be dockerized. Here is an example express app setup:  </p>\n\n<pre><code>app/  \n    assets/\n        css/\n        js/\n        images/\n    app.js\n    package.json\n</code></pre>\n\n<p>For the purposes of this example, when the command node app.js is run, this will start the server on port 8081.</p>\n\n<h6 id=\"steppingthroughthedockerfile\">Stepping through the Dockerfile</h6>\n\n<p>The first thing the Dockerfile specifies is its base image  </p>\n\n<blockquote>\n  <p>FROM    ubuntu</p>\n</blockquote>\n\n<p>Then file lists a series of commands to run on the base image to install all needed dependencies. In this case nodejs </p>\n\n<blockquote>\n  <p>RUN apt-get update</p>\n  \n  <p>RUN apt-get -y install curl</p>\n  \n  <p>RUN curl -sL <a href=\"https://deb.nodesource.com/setup\">https://deb.nodesource.com/setup</a> | sudo bash -</p>\n  \n  <p>RUN apt-get -y install python build-essential nodejs</p>\n</blockquote>\n\n<p>Next we will define how to copy our source code into the image and install the application's dependencies</p>\n\n<blockquote>\n  <p>COPY . /src</p>\n  \n  <p>RUN cd /src; npm install</p>\n</blockquote>\n\n<p>Declare the port that the server runs on</p>\n\n<blockquote>\n  <p>EXPOSE 8081</p>\n</blockquote>\n\n<p>Finally declare the command that will be run when a container is started from this image.</p>\n\n<blockquote>\n  <p>CMD [\"node\", \"./app.js\"]</p>\n</blockquote>\n\n<h6 id=\"thecompletedockerfile\">The Complete Dockerfile</h6>\n\n<p>The Dockerfile explains the step by step instructions to create a new docker image. </p>\n\n<pre><code># Set the base image to Ubuntu\nFROM    ubuntu\n\n# File Author / Maintainer\nMAINTAINER Jonathan Kolb\n\n# Update the repository\nRUN apt-get update\n\n# Install Node.js and other dependencies\nRUN apt-get -y install curl  \nRUN curl -sL https://deb.nodesource.com/setup | sudo bash -  \nRUN apt-get -y install python build-essential nodejs\n\n# Bundle app source\nCOPY . /src\n\n# Install app dependencies\nRUN cd /src; npm install\n\n# Expose port\nEXPOSE  8081\n\n# Run app using node\nCMD [\"node\", \"./app.js\"]  \n</code></pre>\n\n<h4 id=\"buildingtheimage\">Building The Image</h4>\n\n<p>Place the Dockerfile in your project root directory</p>\n\n<p>Run the following  </p>\n\n<pre><code>docker build -t &lt;the-name-of-your-image&gt;:&lt;code-version&gt; .  \n</code></pre>\n\n<p>When this process is finished when you run  </p>\n\n<pre><code>docker images  \n</code></pre>\n\n<p>You should now see the image you created in the list.</p>\n\n<h6 id=\"runningtheimage\">Running the image</h6>\n\n<pre><code>docker run -p 8081:8081 &lt;name-of-the-image&gt;:&lt;version&gt;  \n</code></pre>","image":"http://blog.docker.com/wp-content/uploads/2013/06/Docker-logo-011.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1431199954110,"created_by":1,"updated_at":1431221028226,"updated_by":1,"published_at":1431204276375,"published_by":1,"visibility":"public","mobiledoc":null},{"id":8,"uuid":"77841001-1468-44f7-ad3a-bf9febb581c5","title":"Real Time Server Statistics","slug":"reducing-the-page-size","markdown":"I wanted to play around with [Socket.io](http://socket.io/), a websocket library for javascript. The first thing that came to mind was to display realtime server information on my website. To see this in action just look at the section 'Real Time Server Information' [jonathankolb.com](http://jonathankolb.com)\n\n####Setting up the Socket\nSocket.io is extremely easy to configure. I integrated socket.io with my existing express node app. \n\n```\nvar app = express();\nvar server = require('http').Server(app);\nvar io = require('socket.io')(server);\nvar port = process.env.PORT || 8081;\n/*\n * Start it up\n */\nserver.listen(port);\n```\n\nOkay so now socket.io setup on my app server. Now I need to actually make it accept new connections.\n\n```\nvar statisticsRoom = 'stats';\nio.on('connection', function (socket) {\n  socket.join(statisticsRoom);\n});\n```\n\nNow when a client connects to the server they will be automatically added to a room called stats. Server statistics will be published to that room as they become available.\n\n####Emitting Server Information\nTo get the server's information I used [os](https://nodejs.org/api/os.html). This library provides almost all of the information I wanted to publish out of the box.\n\n```\nsetInterval(function () {\n  var stats = {\n    currentUsers: io.sockets.sockets.length,\n    memory: {\n      free: os.freemem(),\n      used: os.totalmem() - os.freemem()\n    },\n    load: os.loadavg(),\n    cpus: os.cpus(),\n    upTime: os.uptime()\n  };\n\n  io.to(statisticsRoom).emit('stats', stats);\n}, 2000);\n```\nAll this code does is get a variety of statistics and emits them to the statistics room.\n\n####Rendering the Results\nTo render the results I found a [react wrapper](https://github.com/jhudson8/react-chartjs) for [Chart.js](http://www.chartjs.org/). When my single page app fires up, I initialize the socket client and pass it to every react component that I create as a property.\n\n```\n'use strict';\n\nvar React = require('react');\n\nvar CpuStats = require('./cpuStats');\nvar MemStats = require('./memStats');\nvar LoadStats = require('./loadStats');\nvar UserStats = require('./userStats');\n\nvar component = React.createClass({\n  getInitialState: function () {\n    return {\n      stats: null\n    };\n  },\n\n  render: function() {\n    if (!this.state.stats) {\n      return (\n        <section className=\"server-stats\">\n        </section>\n      );\n    }\n\n    return (\n      <section className=\"server-stats\">\n        <UserStats users={this.state.stats.currentUsers} />\n        <LoadStats load={this.state.stats.load} />\n        <CpuStats cpus={this.state.stats.cpus} />\n        <MemStats free={this.state.stats.memory.free} used={this.state.stats.memory.used} />\n      </section>\n    );\n  },\n\n  componentDidMount: function (){\n    this.props.socket.on('stats', function (stats){\n      this.setState({\n        stats: stats\n      });\n    }.bind(this));\n  }\n});\n\nmodule.exports = component;\n```\n\nA sample of the chart components: \n\n```\n'use strict';\n\nvar React = require('react');\nvar BarChart = require('react-chartjs').Bar;\n\n/**\n * This component will render a bar chart visualizing the system load averages.\n *\n */\nvar component = React.createClass({\n\n  getDefaultProps: function (){\n    return {\n      load: [0, 0, 0]\n    };\n  },\n\n  render: function() {\n    var data = {\n      labels: ['1-Minute', '5-Minute', '15-Minute'],\n      datasets: [\n        {\n          label: 'System Load',\n           fillColor: '#81AE9D',\n           strokeColor: '#81AE9D',\n           highlightFill: '#81AE9D',\n           highlightStroke: '#81AE9D',\n           data: this.props.load\n        }\n      ]\n    };\n\n    return (\n      <div className='load'>\n        <div className='load-data__title'>Server Load</div>\n        <div className='load-data__chart'>\n          <BarChart data={data} />\n        </div>\n        <div className='load-data__chart_name'>Server Load Average</div>\n\n      </div>\n\n    );\n  }\n});\n\nmodule.exports = component;\n```\n\nAs always, all of the code can be found on my [github acount](https://github.com/fumblesandfriends/website/tree/master/node).","html":"<p>I wanted to play around with <a href=\"http://socket.io/\">Socket.io</a>, a websocket library for javascript. The first thing that came to mind was to display realtime server information on my website. To see this in action just look at the section 'Real Time Server Information' <a href=\"http://jonathankolb.com\">jonathankolb.com</a></p>\n\n<h4 id=\"settingupthesocket\">Setting up the Socket</h4>\n\n<p>Socket.io is extremely easy to configure. I integrated socket.io with my existing express node app. </p>\n\n<pre><code>var app = express();  \nvar server = require('http').Server(app);  \nvar io = require('socket.io')(server);  \nvar port = process.env.PORT || 8081;  \n/*\n * Start it up\n */\nserver.listen(port);  \n</code></pre>\n\n<p>Okay so now socket.io setup on my app server. Now I need to actually make it accept new connections.</p>\n\n<pre><code>var statisticsRoom = 'stats';  \nio.on('connection', function (socket) {  \n  socket.join(statisticsRoom);\n});\n</code></pre>\n\n<p>Now when a client connects to the server they will be automatically added to a room called stats. Server statistics will be published to that room as they become available.</p>\n\n<h4 id=\"emittingserverinformation\">Emitting Server Information</h4>\n\n<p>To get the server's information I used <a href=\"https://nodejs.org/api/os.html\">os</a>. This library provides almost all of the information I wanted to publish out of the box.</p>\n\n<pre><code>setInterval(function () {  \n  var stats = {\n    currentUsers: io.sockets.sockets.length,\n    memory: {\n      free: os.freemem(),\n      used: os.totalmem() - os.freemem()\n    },\n    load: os.loadavg(),\n    cpus: os.cpus(),\n    upTime: os.uptime()\n  };\n\n  io.to(statisticsRoom).emit('stats', stats);\n}, 2000);\n</code></pre>\n\n<p>All this code does is get a variety of statistics and emits them to the statistics room.</p>\n\n<h4 id=\"renderingtheresults\">Rendering the Results</h4>\n\n<p>To render the results I found a <a href=\"https://github.com/jhudson8/react-chartjs\">react wrapper</a> for <a href=\"http://www.chartjs.org/\">Chart.js</a>. When my single page app fires up, I initialize the socket client and pass it to every react component that I create as a property.</p>\n\n<pre><code>'use strict';\n\nvar React = require('react');\n\nvar CpuStats = require('./cpuStats');  \nvar MemStats = require('./memStats');  \nvar LoadStats = require('./loadStats');  \nvar UserStats = require('./userStats');\n\nvar component = React.createClass({  \n  getInitialState: function () {\n    return {\n      stats: null\n    };\n  },\n\n  render: function() {\n    if (!this.state.stats) {\n      return (\n        &lt;section className=\"server-stats\"&gt;\n        &lt;/section&gt;\n      );\n    }\n\n    return (\n      &lt;section className=\"server-stats\"&gt;\n        &lt;UserStats users={this.state.stats.currentUsers} /&gt;\n        &lt;LoadStats load={this.state.stats.load} /&gt;\n        &lt;CpuStats cpus={this.state.stats.cpus} /&gt;\n        &lt;MemStats free={this.state.stats.memory.free} used={this.state.stats.memory.used} /&gt;\n      &lt;/section&gt;\n    );\n  },\n\n  componentDidMount: function (){\n    this.props.socket.on('stats', function (stats){\n      this.setState({\n        stats: stats\n      });\n    }.bind(this));\n  }\n});\n\nmodule.exports = component;  \n</code></pre>\n\n<p>A sample of the chart components: </p>\n\n<pre><code>'use strict';\n\nvar React = require('react');  \nvar BarChart = require('react-chartjs').Bar;\n\n/**\n * This component will render a bar chart visualizing the system load averages.\n *\n */\nvar component = React.createClass({\n\n  getDefaultProps: function (){\n    return {\n      load: [0, 0, 0]\n    };\n  },\n\n  render: function() {\n    var data = {\n      labels: ['1-Minute', '5-Minute', '15-Minute'],\n      datasets: [\n        {\n          label: 'System Load',\n           fillColor: '#81AE9D',\n           strokeColor: '#81AE9D',\n           highlightFill: '#81AE9D',\n           highlightStroke: '#81AE9D',\n           data: this.props.load\n        }\n      ]\n    };\n\n    return (\n      &lt;div className='load'&gt;\n        &lt;div className='load-data__title'&gt;Server Load&lt;/div&gt;\n        &lt;div className='load-data__chart'&gt;\n          &lt;BarChart data={data} /&gt;\n        &lt;/div&gt;\n        &lt;div className='load-data__chart_name'&gt;Server Load Average&lt;/div&gt;\n\n      &lt;/div&gt;\n\n    );\n  }\n});\n\nmodule.exports = component;  \n</code></pre>\n\n<p>As always, all of the code can be found on my <a href=\"https://github.com/fumblesandfriends/website/tree/master/node\">github acount</a>.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1431440117215,"created_by":1,"updated_at":1431989041880,"updated_by":1,"published_at":1431989041953,"published_by":1,"visibility":"public","mobiledoc":null},{"id":9,"uuid":"db84cd0a-98d1-4a07-89c2-3dae2c3632f2","title":"PNG Sprite to SVG","slug":"using-svg-images-with-fallback","markdown":"I recently converted [Ruff Start Rescue](http://www.ruffstartdogs.org/)'s, a non-profit organization that saves dogs, website from using a PNG sprite to SVGs. The sprite was 46kb and the loaded svg file was 29kb. **A 63% size savings!**  While a sprite will successfully avoid multiple network calls for assets, it is rather limited compared to SVGs.\n\n####Why?\n\nSVG images can be scaled to fit any size. The other major perk if you are daring is that they can be modified and animated by both css and js. The major drawback is that SVG is not supported by IE8 and some versions of andriod. In this case backup PNGs are needed.\n\n\n####How?\n[Grunticon](https://github.com/filamentgroup/grunticon) makes using svgs with fallbacks extremely simple.\n\n> grunticon takes a folder of SVG/PNG files (typically, icons that you've drawn in an application like Adobe Illustrator), and outputs them to CSS in 3 formats: svg data urls, png data urls, and a third fallback CSS file with references to regular png images, which are also automatically generated and placed in a folder.\n\nGrunticon also has a snippet of loader code that is copied into the head of your page files to determine the correct css files to load.\n\n####The Process\n\n\nThe original sprite was built via compass.\n{<1>}![The site sprite](http://i.imgur.com/BJl0t79.png)\n\n######Original code to build the sprite:\n\n```\n_sprites.scss\n\n@import \"compass/utilities/sprites\";\n\n$site-sprite: sprite-map(\"site/*.png\");\n\n@mixin getSpriteImage($map, $sprite) {\n    background: sprite($map, $sprite) no-repeat;\n    width: image-width(sprite-file($map, $sprite));\n    height: image-height(sprite-file($map, $sprite));\n}\n\n.icon-logo {\n  @include getSpriteImage($site-sprite, header_logo);\n}\n...\n\n```\n\n######New Code\n\n```\nGruntfile.js\n\nmodule.exports = function(grunt) {\n  grunt.initConfig({\n  \n ...\n  \n    grunticon: {\n      site: {\n        files: [{\n            expand: true,\n            cwd: 'assets/images/site',\n            src: ['*.svg'],\n            dest: \"assets/images/dist/\"\n        }],\n        options: {\n          pngpath: \"/images/dist/png\" //Setting the serve path to match my server static assets\n        }\n      }\n    },\n    \n ...\n\ngrunt.loadNpmTasks('grunt-grunticon');\n\n```\n\n######The output\n\n```\n\nassets/\n\timages/\n    \tdist/\n        \tgrunticon.loader.js\n        \ticons.data.png.css\n            icons.data.svg.css\n            icons.fallback.css\n        \tpng/\n            \t...\n                adopt.png\n                ...             \n            \t\n```\nTo avoid an initial call to load the grunticon loader js code, I copied the contents of grunticon.loader.js into the head of my document.\n\n######What the page looks like:\n\n```\nmain.handlebars\n\n<head>\n...\n\t\n\t<script>\n    \t//THIS IS WHERE THE CONTENTS OF grunticon.loader.js WOULD BE COPIED.\n    \n\t\tgrunticon([\"/images/dist/icons.data.svg.css\", \"/images/dist/icons.data.png.css\", \"/images/dist/icons.fallback.css\"]);\n  \t</script>\n  \t<noscript>\n    \t<link href=\"/images/dist/icons.fallback.css\" rel=\"stylesheet\">\n      </noscript>\n</head>        \n```","html":"<p>I recently converted <a href=\"http://www.ruffstartdogs.org/\">Ruff Start Rescue</a>'s, a non-profit organization that saves dogs, website from using a PNG sprite to SVGs. The sprite was 46kb and the loaded svg file was 29kb. <strong>A 63% size savings!</strong>  While a sprite will successfully avoid multiple network calls for assets, it is rather limited compared to SVGs.</p>\n\n<h4 id=\"why\">Why?</h4>\n\n<p>SVG images can be scaled to fit any size. The other major perk if you are daring is that they can be modified and animated by both css and js. The major drawback is that SVG is not supported by IE8 and some versions of andriod. In this case backup PNGs are needed.</p>\n\n<h4 id=\"how\">How?</h4>\n\n<p><a href=\"https://github.com/filamentgroup/grunticon\">Grunticon</a> makes using svgs with fallbacks extremely simple.</p>\n\n<blockquote>\n  <p>grunticon takes a folder of SVG/PNG files (typically, icons that you've drawn in an application like Adobe Illustrator), and outputs them to CSS in 3 formats: svg data urls, png data urls, and a third fallback CSS file with references to regular png images, which are also automatically generated and placed in a folder.</p>\n</blockquote>\n\n<p>Grunticon also has a snippet of loader code that is copied into the head of your page files to determine the correct css files to load.</p>\n\n<h4 id=\"theprocess\">The Process</h4>\n\n<p>The original sprite was built via compass. <br />\n<img src=\"http://i.imgur.com/BJl0t79.png\" alt=\"The site sprite\" /></p>\n\n<h6 id=\"originalcodetobuildthesprite\">Original code to build the sprite:</h6>\n\n<pre><code>_sprites.scss\n\n@import \"compass/utilities/sprites\";\n\n$site-sprite: sprite-map(\"site/*.png\");\n\n@mixin getSpriteImage($map, $sprite) {\n    background: sprite($map, $sprite) no-repeat;\n    width: image-width(sprite-file($map, $sprite));\n    height: image-height(sprite-file($map, $sprite));\n}\n\n.icon-logo {\n  @include getSpriteImage($site-sprite, header_logo);\n}\n...\n</code></pre>\n\n<h6 id=\"newcode\">New Code</h6>\n\n<pre><code>Gruntfile.js\n\nmodule.exports = function(grunt) {  \n  grunt.initConfig({\n\n ...\n\n    grunticon: {\n      site: {\n        files: [{\n            expand: true,\n            cwd: 'assets/images/site',\n            src: ['*.svg'],\n            dest: \"assets/images/dist/\"\n        }],\n        options: {\n          pngpath: \"/images/dist/png\" //Setting the serve path to match my server static assets\n        }\n      }\n    },\n\n ...\n\ngrunt.loadNpmTasks('grunt-grunticon');\n</code></pre>\n\n<h6 id=\"theoutput\">The output</h6>\n\n<pre><code>assets/  \n    images/\n        dist/\n            grunticon.loader.js\n            icons.data.png.css\n            icons.data.svg.css\n            icons.fallback.css\n            png/\n                ...\n                adopt.png\n                ...             \n</code></pre>\n\n<p>To avoid an initial call to load the grunticon loader js code, I copied the contents of grunticon.loader.js into the head of my document.</p>\n\n<h6 id=\"whatthepagelookslike\">What the page looks like:</h6>\n\n<pre><code>main.handlebars\n\n&lt;head&gt;  \n...\n\n    &lt;script&gt;\n        //THIS IS WHERE THE CONTENTS OF grunticon.loader.js WOULD BE COPIED.\n\n        grunticon([\"/images/dist/icons.data.svg.css\", \"/images/dist/icons.data.png.css\", \"/images/dist/icons.fallback.css\"]);\n      &lt;/script&gt;\n      &lt;noscript&gt;\n        &lt;link href=\"/images/dist/icons.fallback.css\" rel=\"stylesheet\"&gt;\n      &lt;/noscript&gt;\n&lt;/head&gt;  \n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1431480080170,"created_by":1,"updated_at":1431646001796,"updated_by":1,"published_at":1431645697728,"published_by":1,"visibility":"public","mobiledoc":null},{"id":11,"uuid":"23cf88cd-da1a-449d-8318-2222a1b2c088","title":"An Attempt at Atomic Design","slug":"an-attempt-at-atomic-design","markdown":"I, through my employer [SmarterTravel](http://smartertravelmedia.com), recently had the pleasure of attending [An Event Apart in Boston](http://aneventapart.com/event/boston-2015). I listened to a very interesting talk by [Brad Frost](http://bradfrost.com/). The main take away from this was that I was going about building my sites in a somewhat flawed way.\n\n###My Mistakes\nIn an earlier post I mentioned using Foundation to achieve a responsive page in order to learn a new technology. While learing something new is a worthy endeavor, the end result of my site was a more bloated site with unused features. Every speaker hinted that frameworks were a good start but they also mentioned that they were very restricting. My second mistake was to view websites as a series of pages rather than several templates built out of components. This led me to build several one-off elements rather than reusable code that I could place all over the site. \n\n###An Alternative\nBrad talked about a concept he created called [Atomic Design](http://atomicdesign.bradfrost.com/). The crux of Atomic Design is a consistent feel of elements throughout the whole site. The very core of a site, the atom, are the basic html elements, fonts, and colors. From the atom level molecules are built, a form field with labels. With several molecules an organism is constructed, a search form. Finally we have a template built of our various components just used in different combinations and places.\n\n###Build Your Style Guide\nWhile the speakers were not keen on using 3rd party css frameworks, they did all preach that a site should have a framework, and to build the framework that best suits the site in question. From there also create a style guide so that future designers and developers continue to grow the site in a consistent and maintianable fashion. \n\n###The Gain\n\nThe main gain from this is that with your own framework and style guide you are no longer trapped in someone else's vision of what a website should look like. If your header needs nine responsive breakpoints, define it with nine breakpoints. If your main content only needs two that is now your prerogative. You also no longer have to pollute your markup with excess classes (think Bootstrap or Foundations).\n\n","html":"<p>I, through my employer <a href=\"http://smartertravelmedia.com\">SmarterTravel</a>, recently had the pleasure of attending <a href=\"http://aneventapart.com/event/boston-2015\">An Event Apart in Boston</a>. I listened to a very interesting talk by <a href=\"http://bradfrost.com/\">Brad Frost</a>. The main take away from this was that I was going about building my sites in a somewhat flawed way.</p>\n\n<h3 id=\"mymistakes\">My Mistakes</h3>\n\n<p>In an earlier post I mentioned using Foundation to achieve a responsive page in order to learn a new technology. While learing something new is a worthy endeavor, the end result of my site was a more bloated site with unused features. Every speaker hinted that frameworks were a good start but they also mentioned that they were very restricting. My second mistake was to view websites as a series of pages rather than several templates built out of components. This led me to build several one-off elements rather than reusable code that I could place all over the site. </p>\n\n<h3 id=\"analternative\">An Alternative</h3>\n\n<p>Brad talked about a concept he created called <a href=\"http://atomicdesign.bradfrost.com/\">Atomic Design</a>. The crux of Atomic Design is a consistent feel of elements throughout the whole site. The very core of a site, the atom, are the basic html elements, fonts, and colors. From the atom level molecules are built, a form field with labels. With several molecules an organism is constructed, a search form. Finally we have a template built of our various components just used in different combinations and places.</p>\n\n<h3 id=\"buildyourstyleguide\">Build Your Style Guide</h3>\n\n<p>While the speakers were not keen on using 3rd party css frameworks, they did all preach that a site should have a framework, and to build the framework that best suits the site in question. From there also create a style guide so that future designers and developers continue to grow the site in a consistent and maintianable fashion. </p>\n\n<h3 id=\"thegain\">The Gain</h3>\n\n<p>The main gain from this is that with your own framework and style guide you are no longer trapped in someone else's vision of what a website should look like. If your header needs nine responsive breakpoints, define it with nine breakpoints. If your main content only needs two that is now your prerogative. You also no longer have to pollute your markup with excess classes (think Bootstrap or Foundations).</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1432263065915,"created_by":1,"updated_at":1433008331911,"updated_by":1,"published_at":1433008331944,"published_by":1,"visibility":"public","mobiledoc":null},{"id":12,"uuid":"b8e1441a-3b79-45f5-8768-17b6c21346a4","title":"Problems With My Deploy Process","slug":"create-a-sane-docker-deploy-process","markdown":"Some of the best ideas are proven to be folly when used in practice. This was most definetly the case with my deploy process. I ended up tightly coupling my docker containers to such a point that during a deploy, despite having load balancing, I would have to take down all of my docker containers to restart a single container. \n\n###Original Setup\nIn my original setup I used Docker Compose to define all of the containers. I know the creators advised against this stating that Docker Compose was not production ready. I made the choice to use it because at best my site is a hobby and I was interested in all things in the Docker ecosystem. The perks of a way to define multiple containers and their dependencies were extremely attractive.\n\n> docker-compose.yml\n```\n\nnginx:\n  image: fumblesandfriends/nginx\n  links:\n    - node1:node1\n    - node2:node2\n    - blog1:blog1\n  ports:\n    - \"80:80\"\nnode1:\n  image: fumblesandfriends/node\n  ports:\n    - \"8080\"\n  volumes:\n    - node:/src\n  environment:\n    - RACK_ENV=production\nnode2:\n  image: fumblesandfriends/node\n  ports:\n    - \"8080\"\n  volumes:\n    - node:/src\n  environment:\n    - RACK_ENV=production\nblog1:\n  image: fumblesandfriends/ghost\n  ports:\n    - \"2368\"\n  volumes:\n    - blog:/ghost-override\n```\n\n###The Problem\n\nSome of you who are familiar with Docker might have realized my mistake at first glance. For those who didn't, it is right here:\n```\nnginx:\n  image: fumblesandfriends/nginx\n  links:\n    - node1:node1\n    - node2:node2\n    - blog1:blog1\n```\nThe explicit linking of the containers was nice because I could then reference the aliases from the nginx config; however, when a container is restarted outside of the Docker Compose life cycle, it is no longer linked to the nginx container causing nginx to return 504s.\n\n###Cleaning it all up\nTo clean this up I will define explicit ports for the containers: node1, node2, and blog1. I will remove the explicit linking of the containers and then reference the servers / ports directly in my nginx config. This will allow me to deploy new containers and allow nginx to automatically find the underlying webapp without having to manually link them again.\n\n###Future plans...\nI would like to automate my docker deploy process; currently I am cycling the nodes by hand. I am thinking about doing something along [these lines](http://paislee.io/how-to-automate-docker-deployments/). Ideally I would use a tool where I can specify the servers and provide ssh keys and automate the deploy on multiple nodes at a time.\n","html":"<p>Some of the best ideas are proven to be folly when used in practice. This was most definetly the case with my deploy process. I ended up tightly coupling my docker containers to such a point that during a deploy, despite having load balancing, I would have to take down all of my docker containers to restart a single container. </p>\n\n<h3 id=\"originalsetup\">Original Setup</h3>\n\n<p>In my original setup I used Docker Compose to define all of the containers. I know the creators advised against this stating that Docker Compose was not production ready. I made the choice to use it because at best my site is a hobby and I was interested in all things in the Docker ecosystem. The perks of a way to define multiple containers and their dependencies were extremely attractive.</p>\n\n<blockquote>\n  <p>docker-compose.yml</p>\n</blockquote>\n\n<pre><code>nginx:  \n  image: fumblesandfriends/nginx\n  links:\n    - node1:node1\n    - node2:node2\n    - blog1:blog1\n  ports:\n    - \"80:80\"\nnode1:  \n  image: fumblesandfriends/node\n  ports:\n    - \"8080\"\n  volumes:\n    - node:/src\n  environment:\n    - RACK_ENV=production\nnode2:  \n  image: fumblesandfriends/node\n  ports:\n    - \"8080\"\n  volumes:\n    - node:/src\n  environment:\n    - RACK_ENV=production\nblog1:  \n  image: fumblesandfriends/ghost\n  ports:\n    - \"2368\"\n  volumes:\n    - blog:/ghost-override\n</code></pre>\n\n<h3 id=\"theproblem\">The Problem</h3>\n\n<p>Some of you who are familiar with Docker might have realized my mistake at first glance. For those who didn't, it is right here:  </p>\n\n<pre><code>nginx:  \n  image: fumblesandfriends/nginx\n  links:\n    - node1:node1\n    - node2:node2\n    - blog1:blog1\n</code></pre>\n\n<p>The explicit linking of the containers was nice because I could then reference the aliases from the nginx config; however, when a container is restarted outside of the Docker Compose life cycle, it is no longer linked to the nginx container causing nginx to return 504s.</p>\n\n<h3 id=\"cleaningitallup\">Cleaning it all up</h3>\n\n<p>To clean this up I will define explicit ports for the containers: node1, node2, and blog1. I will remove the explicit linking of the containers and then reference the servers / ports directly in my nginx config. This will allow me to deploy new containers and allow nginx to automatically find the underlying webapp without having to manually link them again.</p>\n\n<h3 id=\"futureplans\">Future plans...</h3>\n\n<p>I would like to automate my docker deploy process; currently I am cycling the nodes by hand. I am thinking about doing something along <a href=\"http://paislee.io/how-to-automate-docker-deployments/\">these lines</a>. Ideally I would use a tool where I can specify the servers and provide ssh keys and automate the deploy on multiple nodes at a time.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1432263088728,"created_by":1,"updated_at":1434328397839,"updated_by":1,"published_at":1434328397842,"published_by":1,"visibility":"public","mobiledoc":null},{"id":13,"uuid":"89754bdb-5650-4812-9395-5dac9c36511f","title":"Isomorphic Page Routing With React","slug":"isomorphic-page-routing-with-react","markdown":">Isomorphic code - code that can run both client-side and server-side.\n\n####The goal\nI was seeking to obtain a simple web app that not only had server-side rendering but also uses client-side rendering after the initial request. While a user's session only loads code from the server once, I also want the user to always have the latest information from the server. \n\nThe initial server request will render the requested page server-side. The full site's javascript and css will also be loaded at that time. From that point on all future internal links on the site will use react-router transitions. The server-side rendering will provide SEO wins because bots will be able to see the full site even without any js running. \n\nAt this point you may be wondering how I plan to refresh stale data in longer user sessions. My solution was to use socket.io client-side to keep any changes in information up to date. \n\n\n####Refactoring\nPreviously, I had all of my react-router routes defined in the app.jsx client-side file that loaded when a page loaded. The first step was to pull that out into its own file routes.jsx and reference that file from both the server- and client-side. \n\nTo support the JSX format in my routes file, which is not natively supported by node, I now start my server with: \n```\nbabel-node app.jsx\n```\nThis allows me to use JSX and ES6 features in my initial start point of my app. Once that was done I used the routes on the server-side to render the page:\n\n```\n// Index Page\napp.get('*', function(request, response, next) {\n  Router.run(routes, request.path, function (Handler, state) {\n    var content = React.renderToString(<Handler />);\n\n    response.render('index', {\n      content: content,\n      pageData: JSON.stringify(pageData)\n    });\n  });\n});\n```\n\n####Refactored Code\n> routes.jsx\n\n```\n\n'use strict';\nvar React = require('react');\n//START REACT ROUTER\nvar Router = require('react-router');\nvar Route = Router.Route;\nvar DefaultRoute = Router.DefaultRoute;\nvar NotFoundRoute = Router.NotFoundRoute;\n\n//APP PAGES\nvar Index = require('./page/index');\nvar NotFound = require('./page/404');\nvar StyleGuide = require('./page/styleGuide');\n\nvar routes = (\n  <Route name='Jonathan Kolb' path=\"/\">\n    <DefaultRoute name='Home' handler={Index} />\n    <Route name='Style Guide' path=\"style-guide\" handler={StyleGuide} />\n    <NotFoundRoute name='404' handler={NotFound} />\n  </Route>\n);\n\nmodule.exports = routes;\n```\n\nNext I require the routes from the server- and client-side.\n\n> app.jsx (server side)\n```\n //START REACT ROUTER\n var Router = require('react-router');\n var routes = require('./assets/js/modules/routes');\n\n\n// Index Page\napp.get('*', function(request, response, next) {\n  Router.run(routes, request.path, function (Handler, state) {\n    var content = React.renderToString(<Handler />);\n\n    response.render('index', {\n      content: content,\n      pageData: JSON.stringify(pageData)\n    });\n  });\n});\n```\n\n> app.jsx (client side) \n\n```\nvar routes = require('routes');\n\nRouter.run(routes, Router.HistoryLocation, function (Handler, state) {\n  React.render(<Handler socket={Socket}/>, document.getElementById('page-content'));\n\n  var title = [];\n\n  for (let route of (state.routes)) {\n    title.push(route.name);\n  }\n\n  document.title = title.join(' - ');\n  ga('send', { 'hitType': 'pageview', 'page': state.path, 'title': title.join(' - ')});\n});\n```\nNow we route from both the client and the server. Any links on the site will use react-router's Link component.\n\nAn example:\n\n```\n<Link to=\"/users/123?foo=bar\">{user.name}</Link>\n```\n\n####Updating Data\n\nNow that we have an Isomorphic routing system the problem presents itself that the user may see stale data if they never hit the server again. \n\nI chose to solve this issue with websockets, specifically socket.io. You may have noticed that in the client-side router configuration I passed in a socket. All of my page components take an optional socket parameter. If it is present when componentDidMount is triggered the socket will be bound for relevent events to the component. \n\n```\n  componentDidMount: function (){\n    this.props.socket.on('stats', function (stats){\n      this.setState({\n        stats: stats\n      });\n    }.bind(this));\n  }\n```\n\nI had no need to prepopulate state from the server-side for my site but it would be trivial to pass data to the page views for initial rendering and then update the state client-side from the socket. \n\n#####Full code\nAs always the full code can be found on my [github](https://github.com/fumblesandfriends/website/tree/master/node)\n","html":"<blockquote>\n  <p>Isomorphic code - code that can run both client-side and server-side.</p>\n</blockquote>\n\n<h4 id=\"thegoal\">The goal</h4>\n\n<p>I was seeking to obtain a simple web app that not only had server-side rendering but also uses client-side rendering after the initial request. While a user's session only loads code from the server once, I also want the user to always have the latest information from the server. </p>\n\n<p>The initial server request will render the requested page server-side. The full site's javascript and css will also be loaded at that time. From that point on all future internal links on the site will use react-router transitions. The server-side rendering will provide SEO wins because bots will be able to see the full site even without any js running. </p>\n\n<p>At this point you may be wondering how I plan to refresh stale data in longer user sessions. My solution was to use socket.io client-side to keep any changes in information up to date. </p>\n\n<h4 id=\"refactoring\">Refactoring</h4>\n\n<p>Previously, I had all of my react-router routes defined in the app.jsx client-side file that loaded when a page loaded. The first step was to pull that out into its own file routes.jsx and reference that file from both the server- and client-side. </p>\n\n<p>To support the JSX format in my routes file, which is not natively supported by node, I now start my server with:  </p>\n\n<pre><code>babel-node app.jsx  \n</code></pre>\n\n<p>This allows me to use JSX and ES6 features in my initial start point of my app. Once that was done I used the routes on the server-side to render the page:</p>\n\n<pre><code>// Index Page\napp.get('*', function(request, response, next) {  \n  Router.run(routes, request.path, function (Handler, state) {\n    var content = React.renderToString(&lt;Handler /&gt;);\n\n    response.render('index', {\n      content: content,\n      pageData: JSON.stringify(pageData)\n    });\n  });\n});\n</code></pre>\n\n<h4 id=\"refactoredcode\">Refactored Code</h4>\n\n<blockquote>\n  <p>routes.jsx</p>\n</blockquote>\n\n<pre><code>'use strict';  \nvar React = require('react');  \n//START REACT ROUTER\nvar Router = require('react-router');  \nvar Route = Router.Route;  \nvar DefaultRoute = Router.DefaultRoute;  \nvar NotFoundRoute = Router.NotFoundRoute;\n\n//APP PAGES\nvar Index = require('./page/index');  \nvar NotFound = require('./page/404');  \nvar StyleGuide = require('./page/styleGuide');\n\nvar routes = (  \n  &lt;Route name='Jonathan Kolb' path=\"/\"&gt;\n    &lt;DefaultRoute name='Home' handler={Index} /&gt;\n    &lt;Route name='Style Guide' path=\"style-guide\" handler={StyleGuide} /&gt;\n    &lt;NotFoundRoute name='404' handler={NotFound} /&gt;\n  &lt;/Route&gt;\n);\n\nmodule.exports = routes;  \n</code></pre>\n\n<p>Next I require the routes from the server- and client-side.</p>\n\n<blockquote>\n  <p>app.jsx (server side)</p>\n</blockquote>\n\n<pre><code> //START REACT ROUTER\n var Router = require('react-router');\n var routes = require('./assets/js/modules/routes');\n\n\n// Index Page\napp.get('*', function(request, response, next) {  \n  Router.run(routes, request.path, function (Handler, state) {\n    var content = React.renderToString(&lt;Handler /&gt;);\n\n    response.render('index', {\n      content: content,\n      pageData: JSON.stringify(pageData)\n    });\n  });\n});\n</code></pre>\n\n<blockquote>\n  <p>app.jsx (client side) </p>\n</blockquote>\n\n<pre><code>var routes = require('routes');\n\nRouter.run(routes, Router.HistoryLocation, function (Handler, state) {  \n  React.render(&lt;Handler socket={Socket}/&gt;, document.getElementById('page-content'));\n\n  var title = [];\n\n  for (let route of (state.routes)) {\n    title.push(route.name);\n  }\n\n  document.title = title.join(' - ');\n  ga('send', { 'hitType': 'pageview', 'page': state.path, 'title': title.join(' - ')});\n});\n</code></pre>\n\n<p>Now we route from both the client and the server. Any links on the site will use react-router's Link component.</p>\n\n<p>An example:</p>\n\n<pre><code>&lt;Link to=\"/users/123?foo=bar\"&gt;{user.name}&lt;/Link&gt;  \n</code></pre>\n\n<h4 id=\"updatingdata\">Updating Data</h4>\n\n<p>Now that we have an Isomorphic routing system the problem presents itself that the user may see stale data if they never hit the server again. </p>\n\n<p>I chose to solve this issue with websockets, specifically socket.io. You may have noticed that in the client-side router configuration I passed in a socket. All of my page components take an optional socket parameter. If it is present when componentDidMount is triggered the socket will be bound for relevent events to the component. </p>\n\n<pre><code>  componentDidMount: function (){\n    this.props.socket.on('stats', function (stats){\n      this.setState({\n        stats: stats\n      });\n    }.bind(this));\n  }\n</code></pre>\n\n<p>I had no need to prepopulate state from the server-side for my site but it would be trivial to pass data to the page views for initial rendering and then update the state client-side from the socket. </p>\n\n<h5 id=\"fullcode\">Full code</h5>\n\n<p>As always the full code can be found on my <a href=\"https://github.com/fumblesandfriends/website/tree/master/node\">github</a></p>","image":"http://rackt.github.io/react-router/img/vertical.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1432263112339,"created_by":1,"updated_at":1435583249763,"updated_by":1,"published_at":1435583107232,"published_by":1,"visibility":"public","mobiledoc":null},{"id":15,"uuid":"d7e9aeae-162e-4d9f-afca-710e06c664fc","title":"This Place Looks a Little Bit Dusty.","slug":"this-place-looks-a-little-bit-dusty","markdown":"It has been an embarrassingly long time since I have done anything with this blog or my website.\n\n#### Where Have I Been? \nWorking on launching new, internationalized websites for SmarterTravel! I was able to get my hands on a lot of new technologies in the process that I hope to write about soon. \n\n####But...\n\n![](/content/images/2016/09/good-news.jpg)\n\nI have some free time and an extremely outdated website. The frontend ecosystem has continued to evolve at an astounding rate, leaving no shortage of new technologies to play with!\n\n#### Some Thoughts on Where to Start:\n\n* Get on a major version of node\n* Update to the latest version of Ghost\n* Completely remove grunt from my build pipeline\n* Actually write about my experiences at work\n* Do a major update of rufftalesrescue.org \n\n#### Check Back for Updates!","html":"<p>It has been an embarrassingly long time since I have done anything with this blog or my website.</p>\n\n<h4 id=\"wherehaveibeen\">Where Have I Been?</h4>\n\n<p>Working on launching new, internationalized websites for SmarterTravel! I was able to get my hands on a lot of new technologies in the process that I hope to write about soon. </p>\n\n<h4 id=\"but\">But...</h4>\n\n<p><img src=\"/content/images/2016/09/good-news.jpg\" alt=\"\" /></p>\n\n<p>I have some free time and an extremely outdated website. The frontend ecosystem has continued to evolve at an astounding rate, leaving no shortage of new technologies to play with!</p>\n\n<h4 id=\"somethoughtsonwheretostart\">Some Thoughts on Where to Start:</h4>\n\n<ul>\n<li>Get on a major version of node</li>\n<li>Update to the latest version of Ghost</li>\n<li>Completely remove grunt from my build pipeline</li>\n<li>Actually write about my experiences at work</li>\n<li>Do a major update of rufftalesrescue.org </li>\n</ul>\n\n<h4 id=\"checkbackforupdates\">Check Back for Updates!</h4>","image":"/content/images/2016/09/tumbleweeds.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1472959642951,"created_by":1,"updated_at":1473215481629,"updated_by":1,"published_at":1473215481630,"published_by":1,"visibility":"public","mobiledoc":null},{"id":16,"uuid":"6d8e25ee-a26e-4b22-badb-f9f6c7186ee9","title":"You've been upgraded to the latest version of Ghost","slug":"ghost-0-7","markdown":"You've just upgraded to the latest version of Ghost and we've made a few changes that you should probably know about!\n\n## Woah, why does everything look different?\n\nAfter two years and hundreds of thousands of users, we learned a great deal about what was (and wasn't) working in the old Ghost admin user interface. What you're looking at is Ghost's first major UI refresh, with a strong focus on being more usable and robust all round.\n\n![New Design](https://ghost.org/images/zelda.png)\n\nThe main navigation menu, previously located at the top of your screen, has now moved over to the left. This makes it way easier to work with on mobile devices, and has the added benefit of providing ample space for upcoming features!\n\n## Lost and found: Your old posts\n\nFrom talking to many of you we understand that finding old posts in the admin area was a real pain; so we've added a new magical search bar which lets you quickly find posts for editing, without having to scroll endlessly. Take it for a spin!\n\n![Search](https://ghost.org/images/search.gif)\n\nQuestions? Comments? Send us a tweet [@TryGhost](https://twitter.com/tryghost)\n\nOh, and yes – you can safely delete this draft post!","html":"<p>You've just upgraded to the latest version of Ghost and we've made a few changes that you should probably know about!</p>\n\n<h2 id=\"woahwhydoeseverythinglookdifferent\">Woah, why does everything look different?</h2>\n\n<p>After two years and hundreds of thousands of users, we learned a great deal about what was (and wasn't) working in the old Ghost admin user interface. What you're looking at is Ghost's first major UI refresh, with a strong focus on being more usable and robust all round.</p>\n\n<p><img src=\"https://ghost.org/images/zelda.png\" alt=\"New Design\" /></p>\n\n<p>The main navigation menu, previously located at the top of your screen, has now moved over to the left. This makes it way easier to work with on mobile devices, and has the added benefit of providing ample space for upcoming features!</p>\n\n<h2 id=\"lostandfoundyouroldposts\">Lost and found: Your old posts</h2>\n\n<p>From talking to many of you we understand that finding old posts in the admin area was a real pain; so we've added a new magical search bar which lets you quickly find posts for editing, without having to scroll endlessly. Take it for a spin!</p>\n\n<p><img src=\"https://ghost.org/images/search.gif\" alt=\"Search\" /></p>\n\n<p>Questions? Comments? Send us a tweet <a href=\"https://twitter.com/tryghost\">@TryGhost</a></p>\n\n<p>Oh, and yes – you can safely delete this draft post!</p>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-09-15 03:25:20","created_by":1,"updated_at":"2016-09-15 03:25:20","updated_by":1,"published_at":"2016-09-15 03:25:20","published_by":null,"visibility":"public","mobiledoc":null}],"users":[{"id":1,"uuid":"c0e4eacf-340c-4fd6-9ec2-b7f4709f0ab6","name":"Jonathan Kolb","slug":"jonathan","password":"$2a$10$vK4BqKFM1gjjslg9f5Gm/uHIT627CHIja4tvEtDnhb6Ul0DZgVeIm","email":"kolb0401@gmail.com","image":"https://scontent-lga3-1.xx.fbcdn.net/v/t1.0-9/13000114_10154773590497468_3216443549778720182_n.jpg?oh=b02f811770e7c047275d48649750ee62&oe=587F523D","cover":"https://scontent-lga3-1.xx.fbcdn.net/v/t1.0-9/12993331_10154773591767468_9001439003244072649_n.jpg?oh=2a32ad04091d99686274e1d963788f2f&oe=5842A72D","bio":" I am a software engineer for Smarter Travel, a subsidiary of TripAdvisor. I do full stack development and love to test out new technologies, both frontend and backend, on my personal site. ","website":"http://jonathankolb.com","location":"Boston, MA","accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":"2016-09-15 03:26:04","created_at":"2015-04-05 22:06:07","created_by":1,"updated_at":"2016-09-15 03:26:04","updated_by":1,"tour":null,"visibility":"public","facebook":null,"twitter":null},{"id":2,"uuid":"2d9e96db-8955-4be7-ab7e-c499233acadf","name":"Chelsea George","slug":"chelsea-george","password":"$2a$10$JvYkLsKvHGLv9qxHHdhR8OKZx5QAtHIzFXv2Qk.apZ.3WF/MapAFy","email":"chelsea.george90@gmail.com","image":null,"cover":null,"bio":null,"website":null,"location":null,"accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":1473208790467,"created_at":1428802804696,"created_by":1,"updated_at":1473208790467,"updated_by":2,"tour":null,"visibility":"public","facebook":null,"twitter":null}],"roles":[{"id":1,"uuid":"b3bc2ce8-787d-483e-aa60-e4e5818cb868","name":"Administrator","description":"Administrators","created_at":1428271566628,"created_by":1,"updated_at":1428271566628,"updated_by":1},{"id":2,"uuid":"7067d1f5-32bc-4338-9b8a-0d17fc8da666","name":"Editor","description":"Editors","created_at":1428271566629,"created_by":1,"updated_at":1428271566629,"updated_by":1},{"id":3,"uuid":"b04a53f5-48f2-4116-a909-d857fd8eff36","name":"Author","description":"Authors","created_at":1428271566629,"created_by":1,"updated_at":1428271566629,"updated_by":1},{"id":4,"uuid":"38fb1da8-a0da-42cd-9639-f1b89a5f9023","name":"Owner","description":"Blog Owner","created_at":1428271566629,"created_by":1,"updated_at":1428271566629,"updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1},{"id":2,"role_id":2,"user_id":2}],"permissions":[{"id":1,"uuid":"e5f4f83c-8f55-4622-8c11-a663f03c7dd5","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":1428271566685,"created_by":1,"updated_at":1428271566685,"updated_by":1},{"id":2,"uuid":"7a0825ab-6a3c-4b57-826c-63e826a9eb9a","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":1428271566689,"created_by":1,"updated_at":1428271566689,"updated_by":1},{"id":3,"uuid":"a7fdd620-e958-48f6-a716-6f52a76cba49","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":1428271566692,"created_by":1,"updated_at":1428271566692,"updated_by":1},{"id":4,"uuid":"468d769c-008f-4417-b1f6-64d8430f60c0","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":1428271566696,"created_by":1,"updated_at":1428271566696,"updated_by":1},{"id":5,"uuid":"a47db5c0-e0d0-486d-bff2-f31f2a76879e","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":1428271566705,"created_by":1,"updated_at":1428271566705,"updated_by":1},{"id":6,"uuid":"29a00f8b-7903-4205-bad6-680f7fce0cb0","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":1428271566711,"created_by":1,"updated_at":1428271566711,"updated_by":1},{"id":7,"uuid":"5b9bd70c-cf5c-4daf-8ad8-01a3f4a4533b","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":1428271566719,"created_by":1,"updated_at":1428271566719,"updated_by":1},{"id":8,"uuid":"3a62e6ac-d746-405d-9835-e57f4ea3e412","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":1428271566728,"created_by":1,"updated_at":1428271566728,"updated_by":1},{"id":9,"uuid":"39f90d88-7fa4-412d-ad74-80dcc0871919","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":1428271566736,"created_by":1,"updated_at":1428271566736,"updated_by":1},{"id":10,"uuid":"91eff4ae-0c1f-43fd-9003-5a1e1453c5bc","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":1428271566741,"created_by":1,"updated_at":1428271566741,"updated_by":1},{"id":11,"uuid":"ee541b32-7be4-4dad-9b16-b53936dc0f41","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":1428271566746,"created_by":1,"updated_at":1428271566746,"updated_by":1},{"id":12,"uuid":"c2bec6df-cad9-49c6-b55f-edb2d8710dbe","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":1428271566751,"created_by":1,"updated_at":1428271566751,"updated_by":1},{"id":13,"uuid":"7167d0cf-913d-4da2-930a-9ec44643427f","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":1428271566756,"created_by":1,"updated_at":1428271566756,"updated_by":1},{"id":14,"uuid":"d1fdd4bc-abd0-4f7b-9055-158786737a24","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":1428271566760,"created_by":1,"updated_at":1428271566760,"updated_by":1},{"id":15,"uuid":"16f2e4cd-30ec-4f49-bf68-97c113b7b94f","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":1428271566763,"created_by":1,"updated_at":1428271566763,"updated_by":1},{"id":16,"uuid":"990113ba-071f-4ddc-86aa-2ef4b67ce384","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":1428271566766,"created_by":1,"updated_at":1428271566766,"updated_by":1},{"id":17,"uuid":"fbe61893-4c33-4589-b84c-086328fa45e4","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":1428271566769,"created_by":1,"updated_at":1428271566769,"updated_by":1},{"id":18,"uuid":"8a45c1bc-b7b2-464b-8964-a7d4c19667f9","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":1428271566772,"created_by":1,"updated_at":1428271566772,"updated_by":1},{"id":19,"uuid":"bb9d514c-bd36-4ba7-bf1c-a2cff83e02c9","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":1428271566774,"created_by":1,"updated_at":1428271566774,"updated_by":1},{"id":20,"uuid":"cb63a6f1-c841-41d1-93b3-b1a626629a7a","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":1428271566777,"created_by":1,"updated_at":1428271566777,"updated_by":1},{"id":21,"uuid":"be06d458-4cdb-4396-b9b5-6775d52efe36","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":1428271566780,"created_by":1,"updated_at":1428271566780,"updated_by":1},{"id":22,"uuid":"046cfa68-0fa8-4f2c-959b-f4f76acabcab","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":1428271566783,"created_by":1,"updated_at":1428271566783,"updated_by":1},{"id":23,"uuid":"f5fc5e7b-ab02-4000-95d6-e6d2deee49b3","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":1428271566785,"created_by":1,"updated_at":1428271566785,"updated_by":1},{"id":24,"uuid":"3d527668-c491-4380-8837-f38542b3f549","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":1428271566789,"created_by":1,"updated_at":1428271566789,"updated_by":1},{"id":25,"uuid":"89c52e1e-4f7a-4d46-9509-572e5c1d7fc3","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":1428271566794,"created_by":1,"updated_at":1428271566794,"updated_by":1},{"id":26,"uuid":"48d00a59-17fe-4cb9-ac9c-9f6221ace9aa","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":1428271566797,"created_by":1,"updated_at":1428271566797,"updated_by":1},{"id":27,"uuid":"0e82c87c-d798-4fef-8ce9-d9a4a3e0fbe7","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":1428271566800,"created_by":1,"updated_at":1428271566800,"updated_by":1},{"id":28,"uuid":"995611b1-7913-4f0f-bb3d-1e856f7295c6","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":1428271566803,"created_by":1,"updated_at":1428271566803,"updated_by":1},{"id":29,"uuid":"358292b6-4a78-40e2-8d3f-97e7f0be6be0","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":1428271566805,"created_by":1,"updated_at":1428271566805,"updated_by":1},{"id":30,"uuid":"6d741df6-6a7c-4f8a-a7e9-ce6d2dd7b0e3","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":1428271566808,"created_by":1,"updated_at":1428271566808,"updated_by":1},{"id":31,"uuid":"38b5986b-0902-4432-80ba-48c8a26ba4c6","name":"Browse clients","object_type":"client","action_type":"browse","object_id":null,"created_at":"2016-09-15 03:25:20","created_by":1,"updated_at":"2016-09-15 03:25:20","updated_by":1},{"id":32,"uuid":"afdc8df2-1fb5-4327-acc4-fd004456d07e","name":"Read clients","object_type":"client","action_type":"read","object_id":null,"created_at":"2016-09-15 03:25:20","created_by":1,"updated_at":"2016-09-15 03:25:20","updated_by":1},{"id":33,"uuid":"718b71d6-3b3d-40c3-82df-2f5da8efe925","name":"Edit clients","object_type":"client","action_type":"edit","object_id":null,"created_at":"2016-09-15 03:25:20","created_by":1,"updated_at":"2016-09-15 03:25:20","updated_by":1},{"id":34,"uuid":"42c84b77-a691-4205-a58f-0be6cb7403d8","name":"Add clients","object_type":"client","action_type":"add","object_id":null,"created_at":"2016-09-15 03:25:20","created_by":1,"updated_at":"2016-09-15 03:25:20","updated_by":1},{"id":35,"uuid":"6f307e78-6174-4f9f-a484-3a64a86614a6","name":"Delete clients","object_type":"client","action_type":"destroy","object_id":null,"created_at":"2016-09-15 03:25:20","created_by":1,"updated_at":"2016-09-15 03:25:20","updated_by":1},{"id":36,"uuid":"630a33e4-273c-413e-826c-e3f31038a8cb","name":"Browse subscribers","object_type":"subscriber","action_type":"browse","object_id":null,"created_at":"2016-09-15 03:25:20","created_by":1,"updated_at":"2016-09-15 03:25:20","updated_by":1},{"id":37,"uuid":"268bf5d3-10d7-4390-84c5-6b901b976f72","name":"Read subscribers","object_type":"subscriber","action_type":"read","object_id":null,"created_at":"2016-09-15 03:25:20","created_by":1,"updated_at":"2016-09-15 03:25:20","updated_by":1},{"id":38,"uuid":"9f2ae86d-799a-4631-b81b-869ba476ace6","name":"Edit subscribers","object_type":"subscriber","action_type":"edit","object_id":null,"created_at":"2016-09-15 03:25:20","created_by":1,"updated_at":"2016-09-15 03:25:20","updated_by":1},{"id":39,"uuid":"590d2cf4-6a25-4044-b6e2-73b5a5332f6c","name":"Add subscribers","object_type":"subscriber","action_type":"add","object_id":null,"created_at":"2016-09-15 03:25:20","created_by":1,"updated_at":"2016-09-15 03:25:20","updated_by":1},{"id":40,"uuid":"0433e96e-861a-4435-933e-389c6349408d","name":"Delete subscribers","object_type":"subscriber","action_type":"destroy","object_id":null,"created_at":"2016-09-15 03:25:20","created_by":1,"updated_at":"2016-09-15 03:25:20","updated_by":1},{"id":41,"uuid":"9d6ec178-06f0-4a5a-b412-cf2bf46222d3","name":"Upload themes","object_type":"theme","action_type":"add","object_id":null,"created_at":"2016-09-15 03:25:20","created_by":1,"updated_at":"2016-09-15 03:25:20","updated_by":1},{"id":42,"uuid":"a837b058-8c7f-4114-afe5-d2db7e1ee15c","name":"Download themes","object_type":"theme","action_type":"read","object_id":null,"created_at":"2016-09-15 03:25:20","created_by":1,"updated_at":"2016-09-15 03:25:20","updated_by":1},{"id":43,"uuid":"49b01d57-aa56-4acf-b182-565e471db9b6","name":"Delete themes","object_type":"theme","action_type":"destroy","object_id":null,"created_at":"2016-09-15 03:25:20","created_by":1,"updated_at":"2016-09-15 03:25:20","updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3},{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":2,"permission_id":8},{"id":32,"role_id":2,"permission_id":9},{"id":33,"role_id":2,"permission_id":10},{"id":34,"role_id":2,"permission_id":11},{"id":35,"role_id":2,"permission_id":12},{"id":36,"role_id":2,"permission_id":13},{"id":37,"role_id":2,"permission_id":14},{"id":38,"role_id":2,"permission_id":16},{"id":39,"role_id":2,"permission_id":17},{"id":40,"role_id":2,"permission_id":18},{"id":41,"role_id":2,"permission_id":19},{"id":42,"role_id":2,"permission_id":20},{"id":43,"role_id":2,"permission_id":21},{"id":44,"role_id":2,"permission_id":24},{"id":45,"role_id":2,"permission_id":25},{"id":46,"role_id":2,"permission_id":26},{"id":47,"role_id":2,"permission_id":27},{"id":48,"role_id":2,"permission_id":28},{"id":49,"role_id":2,"permission_id":29},{"id":50,"role_id":2,"permission_id":30},{"id":51,"role_id":3,"permission_id":8},{"id":52,"role_id":3,"permission_id":9},{"id":53,"role_id":3,"permission_id":11},{"id":54,"role_id":3,"permission_id":13},{"id":55,"role_id":3,"permission_id":14},{"id":56,"role_id":3,"permission_id":16},{"id":57,"role_id":3,"permission_id":17},{"id":58,"role_id":3,"permission_id":18},{"id":59,"role_id":3,"permission_id":20},{"id":60,"role_id":3,"permission_id":24},{"id":61,"role_id":3,"permission_id":25},{"id":62,"role_id":3,"permission_id":30},{"id":63,"role_id":1,"permission_id":31},{"id":64,"role_id":1,"permission_id":35},{"id":65,"role_id":1,"permission_id":32},{"id":66,"role_id":1,"permission_id":33},{"id":67,"role_id":1,"permission_id":34},{"id":68,"role_id":2,"permission_id":31},{"id":69,"role_id":2,"permission_id":32},{"id":70,"role_id":2,"permission_id":33},{"id":71,"role_id":2,"permission_id":34},{"id":72,"role_id":2,"permission_id":35},{"id":73,"role_id":3,"permission_id":31},{"id":74,"role_id":3,"permission_id":32},{"id":75,"role_id":3,"permission_id":33},{"id":76,"role_id":3,"permission_id":34},{"id":77,"role_id":3,"permission_id":35},{"id":78,"role_id":1,"permission_id":36},{"id":79,"role_id":1,"permission_id":37},{"id":80,"role_id":1,"permission_id":38},{"id":81,"role_id":1,"permission_id":39},{"id":82,"role_id":1,"permission_id":40},{"id":83,"role_id":2,"permission_id":39},{"id":84,"role_id":3,"permission_id":39},{"id":85,"role_id":1,"permission_id":41},{"id":86,"role_id":1,"permission_id":42},{"id":87,"role_id":1,"permission_id":43}],"permissions_apps":[],"settings":[{"id":1,"uuid":"94d20504-a4f8-471b-8db2-66cc97e35bc4","key":"databaseVersion","value":"007","type":"core","created_at":1428271567417,"created_by":1,"updated_at":1428271567417,"updated_by":1},{"id":2,"uuid":"5fad78dc-590c-4708-8e82-509bf5589a0b","key":"dbHash","value":"455e2b64-8fb7-461a-94ee-d43e7f9cc2a1","type":"core","created_at":1428271567423,"created_by":1,"updated_at":1428271567523,"updated_by":1},{"id":3,"uuid":"fe95a846-5c97-4460-9829-17067acabbca","key":"nextUpdateCheck","value":"1473996357","type":"core","created_at":"2015-04-05 22:06:07","created_by":1,"updated_at":"2016-09-15 03:25:57","updated_by":1},{"id":4,"uuid":"5cc38daf-f352-43d7-9f23-056942551b6a","key":"displayUpdateNotification","value":"0.10.1","type":"core","created_at":"2015-04-05 22:06:07","created_by":1,"updated_at":"2016-09-15 03:25:57","updated_by":1},{"id":5,"uuid":"4e2c83ce-163c-48b2-841e-cc4889b1fd5a","key":"title","value":"Hi I'm Jonathan","type":"blog","created_at":1428271567424,"created_by":1,"updated_at":1473221476005,"updated_by":1},{"id":6,"uuid":"1ff229b9-dc22-47a0-9194-273c63ada4c8","key":"description","value":"Software Engineer, Web Developer, Hockey Enthusiast, Talentless Writer.","type":"blog","created_at":1428271567424,"created_by":1,"updated_at":1473221476007,"updated_by":1},{"id":7,"uuid":"8d21e992-a474-4a81-b12a-f035e51ff823","key":"email","value":"kolb0401@gmail.com","type":"blog","created_at":1428271567425,"created_by":1,"updated_at":1473221476008,"updated_by":1},{"id":8,"uuid":"bafc0278-475a-4910-af85-9f3cb477ed15","key":"logo","value":"","type":"blog","created_at":1428271567425,"created_by":1,"updated_at":1473221476010,"updated_by":1},{"id":9,"uuid":"3da4b41a-8bf0-4110-a835-23ad9909cf53","key":"cover","value":"/content/images/2016/09/background.jpg","type":"blog","created_at":1428271567425,"created_by":1,"updated_at":1473221476011,"updated_by":1},{"id":10,"uuid":"061eb55a-e0b5-43a8-8fa9-5d827f7c585f","key":"defaultLang","value":"en_US","type":"blog","created_at":1428271567425,"created_by":1,"updated_at":1473221476014,"updated_by":1},{"id":11,"uuid":"e1dfb1ac-83a9-46a0-85b5-0c19ac6e57fe","key":"postsPerPage","value":"5","type":"blog","created_at":1428271567425,"created_by":1,"updated_at":1473221476015,"updated_by":1},{"id":12,"uuid":"a98af286-bf2d-4c86-8f81-bc6a75adc4ba","key":"forceI18n","value":"true","type":"blog","created_at":1428271567425,"created_by":1,"updated_at":1473221476017,"updated_by":1},{"id":13,"uuid":"123e063e-3bf7-495e-b6ba-04809c4bd2b7","key":"permalinks","value":"/:slug/","type":"blog","created_at":1428271567425,"created_by":1,"updated_at":1473221476019,"updated_by":1},{"id":14,"uuid":"072c4308-8629-44e9-8c80-710518abf6a7","key":"ghost_head","value":"","type":"blog","created_at":1428271567425,"created_by":1,"updated_at":1473221476022,"updated_by":1},{"id":15,"uuid":"7ff5badf-9a81-4e8a-a652-ef47328f1fb1","key":"ghost_foot","value":"<!-- You can safely delete this line if your theme does not require jQuery -->\n<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-1.11.3.min.js\"></script>\n\n","type":"blog","created_at":"2015-04-05 22:06:07","created_by":1,"updated_at":"2016-09-15 03:25:20","updated_by":1},{"id":16,"uuid":"210acdc9-5008-4f83-876e-f3090f4a9e4e","key":"labs","value":"{}","type":"blog","created_at":1428271567426,"created_by":1,"updated_at":1473221476024,"updated_by":1},{"id":17,"uuid":"800ea49e-471c-4fae-8d91-ea4888f832b7","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"/\"},{\"label\":\"My Website\",\"url\":\"http://jonathankolb.com/\"}]","type":"blog","created_at":1428271567426,"created_by":1,"updated_at":1473221476026,"updated_by":1},{"id":18,"uuid":"0a4b9311-1ba2-4886-a7d7-9e18b0a46e4b","key":"activeApps","value":"[]","type":"app","created_at":1428271567426,"created_by":1,"updated_at":1428271567426,"updated_by":1},{"id":19,"uuid":"b2058b1d-e9d2-43d3-8794-0fe4986cb5cd","key":"installedApps","value":"[]","type":"app","created_at":"2015-04-05 22:06:07","created_by":1,"updated_at":"2016-09-19 00:12:06","updated_by":1},{"id":20,"uuid":"bec1465c-20e3-4a93-aa95-14bd9968bb59","key":"activeTheme","value":"casper","type":"theme","created_at":1428271567426,"created_by":1,"updated_at":1473221476020,"updated_by":1},{"id":21,"uuid":"9bbd83b4-df4e-4444-aba2-1e654b08ddf2","key":"seenNotifications","value":"[]","type":"core","created_at":"2016-09-15 03:25:19","created_by":1,"updated_at":"2016-09-15 03:25:19","updated_by":1},{"id":22,"uuid":"21d88439-1805-497d-82d1-3b5624eaf30b","key":"migrations","value":"{}","type":"core","created_at":"2016-09-15 03:25:19","created_by":1,"updated_at":"2016-09-15 03:25:19","updated_by":1},{"id":23,"uuid":"669481ba-bf69-4531-a279-5e9eb8f89053","key":"activeTimezone","value":"Etc/UTC","type":"blog","created_at":"2016-09-15 03:25:19","created_by":1,"updated_at":"2016-09-15 03:25:19","updated_by":1},{"id":24,"uuid":"b5502364-6c6a-4f15-a84a-34961568297d","key":"facebook","value":"","type":"blog","created_at":"2016-09-15 03:25:19","created_by":1,"updated_at":"2016-09-15 03:25:19","updated_by":1},{"id":25,"uuid":"fc66cdfe-0950-44fd-bb9c-6ab6240e5a1f","key":"twitter","value":"","type":"blog","created_at":"2016-09-15 03:25:19","created_by":1,"updated_at":"2016-09-15 03:25:19","updated_by":1},{"id":26,"uuid":"1bfbd311-edaf-48b9-bc91-3c9eb7512dbc","key":"slack","value":"[{\"url\":\"\"}]","type":"blog","created_at":"2016-09-15 03:25:19","created_by":1,"updated_at":"2016-09-15 03:25:19","updated_by":1},{"id":27,"uuid":"ad1b3f14-c3de-45be-abb2-2489f0da0263","key":"isPrivate","value":"false","type":"private","created_at":"2016-09-15 03:25:19","created_by":1,"updated_at":"2016-09-15 03:25:19","updated_by":1},{"id":28,"uuid":"e118712d-ef02-4683-9cbb-255385165cbc","key":"password","value":"","type":"private","created_at":"2016-09-15 03:25:19","created_by":1,"updated_at":"2016-09-15 03:25:19","updated_by":1}],"posts_tags":[{"id":7,"post_id":2,"tag_id":2,"sort_order":0},{"id":8,"post_id":2,"tag_id":3,"sort_order":1},{"id":9,"post_id":2,"tag_id":4,"sort_order":2},{"id":10,"post_id":2,"tag_id":5,"sort_order":3},{"id":11,"post_id":2,"tag_id":6,"sort_order":4},{"id":12,"post_id":2,"tag_id":7,"sort_order":5},{"id":13,"post_id":2,"tag_id":8,"sort_order":6},{"id":37,"post_id":3,"tag_id":4,"sort_order":0},{"id":38,"post_id":3,"tag_id":8,"sort_order":1},{"id":210,"post_id":4,"tag_id":3,"sort_order":0},{"id":211,"post_id":4,"tag_id":7,"sort_order":1},{"id":212,"post_id":4,"tag_id":10,"sort_order":2},{"id":213,"post_id":4,"tag_id":11,"sort_order":3},{"id":220,"post_id":5,"tag_id":12,"sort_order":0},{"id":221,"post_id":5,"tag_id":13,"sort_order":1},{"id":222,"post_id":5,"tag_id":14,"sort_order":2},{"id":223,"post_id":5,"tag_id":15,"sort_order":3},{"id":224,"post_id":5,"tag_id":16,"sort_order":4},{"id":225,"post_id":5,"tag_id":17,"sort_order":5},{"id":666,"post_id":6,"tag_id":10,"sort_order":0},{"id":667,"post_id":6,"tag_id":18,"sort_order":1},{"id":668,"post_id":6,"tag_id":19,"sort_order":2},{"id":669,"post_id":6,"tag_id":20,"sort_order":3},{"id":670,"post_id":6,"tag_id":21,"sort_order":4},{"id":911,"post_id":7,"tag_id":2,"sort_order":0},{"id":912,"post_id":7,"tag_id":5,"sort_order":1},{"id":913,"post_id":7,"tag_id":22,"sort_order":2},{"id":987,"post_id":9,"tag_id":7,"sort_order":0},{"id":988,"post_id":9,"tag_id":23,"sort_order":1},{"id":989,"post_id":9,"tag_id":24,"sort_order":2},{"id":990,"post_id":9,"tag_id":25,"sort_order":3},{"id":1198,"post_id":8,"tag_id":5,"sort_order":0},{"id":1199,"post_id":8,"tag_id":26,"sort_order":1},{"id":1200,"post_id":8,"tag_id":27,"sort_order":2},{"id":1201,"post_id":8,"tag_id":28,"sort_order":3},{"id":1202,"post_id":8,"tag_id":29,"sort_order":4},{"id":1311,"post_id":11,"tag_id":30,"sort_order":0},{"id":1312,"post_id":11,"tag_id":31,"sort_order":1},{"id":1421,"post_id":12,"tag_id":2,"sort_order":0},{"id":1422,"post_id":12,"tag_id":4,"sort_order":1},{"id":1423,"post_id":12,"tag_id":32,"sort_order":2},{"id":1424,"post_id":12,"tag_id":33,"sort_order":3},{"id":1425,"post_id":12,"tag_id":34,"sort_order":4},{"id":1426,"post_id":12,"tag_id":35,"sort_order":5},{"id":1728,"post_id":13,"tag_id":17,"sort_order":0},{"id":1729,"post_id":13,"tag_id":22,"sort_order":1},{"id":1730,"post_id":13,"tag_id":26,"sort_order":2},{"id":1731,"post_id":13,"tag_id":36,"sort_order":3}],"apps":[],"app_settings":[],"app_fields":[],"tags":[{"id":2,"uuid":"4a268697-bcd9-42a3-b523-c10410f0ca81","name":"docker","slug":"docker","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1428802704213,"created_by":1,"updated_at":1428802704213,"updated_by":1,"visibility":"public"},{"id":3,"uuid":"b48add34-3fab-4d76-95fb-8ad9362c72d4","name":"grunt","slug":"grunt","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1428802704227,"created_by":1,"updated_at":1428802704227,"updated_by":1,"visibility":"public"},{"id":4,"uuid":"c90fd959-62a2-4575-99c3-620dda70e260","name":"nginx","slug":"nginx","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1428802704236,"created_by":1,"updated_at":1428802704236,"updated_by":1,"visibility":"public"},{"id":5,"uuid":"78575d67-e19f-4010-a054-1205d00f5aee","name":"node.js","slug":"node-js","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1428802704243,"created_by":1,"updated_at":1428802704243,"updated_by":1,"visibility":"public"},{"id":6,"uuid":"0dac8347-40ea-48b0-8d75-0875b9f021c1","name":"sass","slug":"sass","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1428802704251,"created_by":1,"updated_at":1428802704251,"updated_by":1,"visibility":"public"},{"id":7,"uuid":"0c0e2275-b70a-4b05-bc5c-842967e99d58","name":"compass","slug":"compass","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1428802704259,"created_by":1,"updated_at":1428802704259,"updated_by":1,"visibility":"public"},{"id":8,"uuid":"b2df102a-ab63-4578-938f-5f7144b1ab6f","name":"server architecture","slug":"server-architecture","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1428802704267,"created_by":1,"updated_at":1428802704267,"updated_by":1,"visibility":"public"},{"id":10,"uuid":"4d6c3936-8f0f-4d7d-bf0e-aba81e85d578","name":"webpack","slug":"webpack","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1430087512145,"created_by":1,"updated_at":1430087512145,"updated_by":1,"visibility":"public"},{"id":11,"uuid":"9f81bc0a-4ee5-4d56-9c36-cbadd672273f","name":"npm","slug":"npm","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1430087512172,"created_by":1,"updated_at":1430087512172,"updated_by":1,"visibility":"public"},{"id":12,"uuid":"4c983cef-f377-475b-9438-abff5eb84266","name":"reactjs","slug":"reactjs","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1430087565335,"created_by":1,"updated_at":1430087565335,"updated_by":1,"visibility":"public"},{"id":13,"uuid":"789e4b54-38e7-4ed9-9caf-aeac2a2fb1ec","name":"backbone","slug":"backbone","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1430087565367,"created_by":1,"updated_at":1430087565367,"updated_by":1,"visibility":"public"},{"id":14,"uuid":"265b36f6-31dd-4486-837c-9a62813ed737","name":"flightjs","slug":"flightjs","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1430087565386,"created_by":1,"updated_at":1430087565386,"updated_by":1,"visibility":"public"},{"id":15,"uuid":"2679f5e4-d833-46c3-af07-7c9346ce777c","name":"foundation","slug":"foundation","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1430087565408,"created_by":1,"updated_at":1430087565408,"updated_by":1,"visibility":"public"},{"id":16,"uuid":"2fff3653-a28e-4aa4-a530-1df1e3f9c294","name":"responsive","slug":"responsive","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1430087565425,"created_by":1,"updated_at":1430087565425,"updated_by":1,"visibility":"public"},{"id":17,"uuid":"268a06a7-0b7c-4828-b15e-eadf5292e9c8","name":"react-router","slug":"react-router","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1430100800267,"created_by":1,"updated_at":1430100800267,"updated_by":1,"visibility":"public"},{"id":18,"uuid":"d1e9a64c-b0c4-4d1d-9530-8c8a91f7375b","name":"es6","slug":"es6","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1430572431826,"created_by":1,"updated_at":1430572431826,"updated_by":1,"visibility":"public"},{"id":19,"uuid":"983578f7-ff06-4625-936c-266b7d56f72d","name":"lint","slug":"lint","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1430572431881,"created_by":1,"updated_at":1430572431881,"updated_by":1,"visibility":"public"},{"id":20,"uuid":"a8067709-b26b-48a3-834f-8b75bba35e44","name":"eslint","slug":"eslint","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1430572431910,"created_by":1,"updated_at":1430572431910,"updated_by":1,"visibility":"public"},{"id":21,"uuid":"b184641a-f558-44ce-9797-cf1ddd3423ee","name":"jsx","slug":"jsx","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1430572431933,"created_by":1,"updated_at":1430572431933,"updated_by":1,"visibility":"public"},{"id":22,"uuid":"86bdad84-b080-415e-9933-4ff5d94d67f6","name":"expressjs","slug":"expressjs","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431200549828,"created_by":1,"updated_at":1431200549828,"updated_by":1,"visibility":"public"},{"id":23,"uuid":"c70dad2b-3dda-489a-8ada-f529f5d7fd03","name":"grunticon","slug":"grunticon","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431573891791,"created_by":1,"updated_at":1431573891791,"updated_by":1,"visibility":"public"},{"id":24,"uuid":"e8de90b9-fa66-4c40-885a-e9689fc15171","name":"svg","slug":"svg","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431573891858,"created_by":1,"updated_at":1431573891858,"updated_by":1,"visibility":"public"},{"id":25,"uuid":"240df183-fd10-49f4-af4f-1290dcf31bd9","name":"png","slug":"png","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431573891881,"created_by":1,"updated_at":1431573891881,"updated_by":1,"visibility":"public"},{"id":26,"uuid":"31a5d0ce-b3c2-4d10-9ae8-67e8fe74baa4","name":"socket.io","slug":"socket-io","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431899538933,"created_by":1,"updated_at":1431899538933,"updated_by":1,"visibility":"public"},{"id":27,"uuid":"645f4641-03a2-4453-8a59-27dd7e800bb4","name":"os","slug":"os","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431899538998,"created_by":1,"updated_at":1431899538998,"updated_by":1,"visibility":"public"},{"id":28,"uuid":"953a5141-b144-4f50-a5dd-95a36cdff864","name":"chartjs","slug":"chartjs","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431900085749,"created_by":1,"updated_at":1431900085749,"updated_by":1,"visibility":"public"},{"id":29,"uuid":"dbf09912-8844-407e-a623-9ffdbf257f55","name":"react.js","slug":"react-js","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431900557632,"created_by":1,"updated_at":1431900557632,"updated_by":1,"visibility":"public"},{"id":30,"uuid":"b6635332-cc71-4a3f-aba4-923f94141ba6","name":"atomic-design","slug":"atomic-design","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1432575794315,"created_by":1,"updated_at":1432575794315,"updated_by":1,"visibility":"public"},{"id":31,"uuid":"bc0df47e-b86d-44f4-b788-a93d730c4880","name":"aea","slug":"aea","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1432575794332,"created_by":1,"updated_at":1432575794332,"updated_by":1,"visibility":"public"},{"id":32,"uuid":"d96d2af3-c636-49cb-ad15-559d5b1eda68","name":"docker-compose","slug":"docker-compose","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1434325367511,"created_by":1,"updated_at":1434325367511,"updated_by":1,"visibility":"public"},{"id":33,"uuid":"45af785c-6cc4-446e-aab3-fcf7078b59f9","name":"deployment","slug":"deployment","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1434325367544,"created_by":1,"updated_at":1434325367544,"updated_by":1,"visibility":"public"},{"id":34,"uuid":"f05add6e-dd9a-4392-b107-4c1f35299418","name":"deploy","slug":"deploy","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1434325367559,"created_by":1,"updated_at":1434325367559,"updated_by":1,"visibility":"public"},{"id":35,"uuid":"38bbce64-3661-485a-82a8-03e6688e7b15","name":"automation","slug":"automation","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1434325367573,"created_by":1,"updated_at":1434325367573,"updated_by":1,"visibility":"public"},{"id":36,"uuid":"7f6dc846-50e9-4c5d-94ef-888150078be6","name":"rwd","slug":"rwd","description":null,"image":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1435538811046,"created_by":1,"updated_at":1435538811046,"updated_by":1,"visibility":"public"}],"subscribers":[]}}